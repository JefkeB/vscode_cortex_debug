
app.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000237c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000064  20000000  0000237c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  00020064  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  00020064  2**0
                  CONTENTS
  4 .bss          00000038  20000064  000023e0  00020064  2**2
                  ALLOC
  5 .stack        00010004  2000009c  00002418  00020064  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
  7 .comment      00000068  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY
  8 .debug_info   00021270  00000000  00000000  000200fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002e53  00000000  00000000  0004136a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000570  00000000  00000000  000441bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000328  00000000  00000000  0004472d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e8  00000000  00000000  00044a55  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002d951  00000000  00000000  00044c3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00009932  00000000  00000000  0007258e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000f8f39  00000000  00000000  0007bec0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00000bd0  00000000  00000000  00174dfc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	a0 00 01 20 7d 0c 00 00 79 0c 00 00 05 04 00 00     ... }...y.......
      10:	79 0c 00 00 79 0c 00 00 79 0c 00 00 00 00 00 00     y...y...y.......
	...
      2c:	79 0c 00 00 79 0c 00 00 00 00 00 00 79 0c 00 00     y...y.......y...
      3c:	79 0c 00 00 79 0c 00 00 79 0c 00 00 79 0c 00 00     y...y...y...y...
      4c:	79 0c 00 00 79 0c 00 00 79 0c 00 00 79 0c 00 00     y...y...y...y...
      5c:	79 0c 00 00 79 0c 00 00 79 0c 00 00 79 0c 00 00     y...y...y...y...
      6c:	e9 03 00 00 79 0c 00 00 79 0c 00 00 79 0c 00 00     ....y...y...y...
      7c:	79 0c 00 00 79 0c 00 00 79 0c 00 00 79 0c 00 00     y...y...y...y...
      8c:	79 0c 00 00 79 0c 00 00 79 0c 00 00 79 0c 00 00     y...y...y...y...
      9c:	79 0c 00 00 79 0c 00 00 79 0c 00 00 79 0c 00 00     y...y...y...y...
      ac:	79 0c 00 00 79 0c 00 00 79 0c 00 00 79 0c 00 00     y...y...y...y...
      bc:	79 0c 00 00 79 0c 00 00 79 0c 00 00 79 0c 00 00     y...y...y...y...
      cc:	79 0c 00 00 79 0c 00 00 79 0c 00 00 79 0c 00 00     y...y...y...y...
      dc:	79 0c 00 00 79 0c 00 00 79 0c 00 00 00 00 00 00     y...y...y.......
	...
      f4:	79 0c 00 00 79 0c 00 00 79 0c 00 00 79 0c 00 00     y...y...y...y...
     104:	79 0c 00 00 79 0c 00 00 79 0c 00 00 79 0c 00 00     y...y...y...y...
     114:	79 0c 00 00 79 0c 00 00 79 0c 00 00 79 0c 00 00     y...y...y...y...
     124:	79 0c 00 00 79 0c 00 00 79 0c 00 00 79 0c 00 00     y...y...y...y...
     134:	79 0c 00 00 79 0c 00 00 79 0c 00 00 79 0c 00 00     y...y...y...y...
     144:	79 0c 00 00 79 0c 00 00 79 0c 00 00 79 0c 00 00     y...y...y...y...
     154:	79 0c 00 00 79 0c 00 00 79 0c 00 00 79 0c 00 00     y...y...y...y...
     164:	79 0c 00 00 79 0c 00 00 79 0c 00 00 79 0c 00 00     y...y...y...y...
     174:	79 0c 00 00 79 0c 00 00 79 0c 00 00 79 0c 00 00     y...y...y...y...
     184:	79 0c 00 00 79 0c 00 00 79 0c 00 00 79 0c 00 00     y...y...y...y...
     194:	79 0c 00 00 79 0c 00 00 79 0c 00 00 79 0c 00 00     y...y...y...y...
     1a4:	79 0c 00 00 79 0c 00 00 79 0c 00 00 79 0c 00 00     y...y...y...y...
     1b4:	79 0c 00 00 79 0c 00 00 79 0c 00 00 79 0c 00 00     y...y...y...y...
     1c4:	79 0c 00 00 79 0c 00 00 79 0c 00 00 79 0c 00 00     y...y...y...y...
     1d4:	79 0c 00 00 79 0c 00 00 79 0c 00 00 79 0c 00 00     y...y...y...y...
     1e4:	79 0c 00 00 79 0c 00 00 79 0c 00 00 79 0c 00 00     y...y...y...y...
     1f4:	79 0c 00 00 79 0c 00 00 79 0c 00 00 79 0c 00 00     y...y...y...y...
     204:	79 0c 00 00 79 0c 00 00 79 0c 00 00 79 0c 00 00     y...y...y...y...
     214:	79 0c 00 00 79 0c 00 00 79 0c 00 00 09 04 00 00     y...y...y.......
     224:	35 04 00 00 61 04 00 00 79 0c 00 00 79 0c 00 00     5...a...y...y...
     234:	79 0c 00 00 79 0c 00 00 79 0c 00 00 79 0c 00 00     y...y...y...y...
     244:	79 0c 00 00 79 0c 00 00 79 0c 00 00 79 0c 00 00     y...y...y...y...
     254:	79 0c 00 00 79 0c 00 00 79 0c 00 00 79 0c 00 00     y...y...y...y...

00000264 <deregister_tm_clones>:
     264:	4803      	ldr	r0, [pc, #12]	; (274 <deregister_tm_clones+0x10>)
     266:	4b04      	ldr	r3, [pc, #16]	; (278 <deregister_tm_clones+0x14>)
     268:	4283      	cmp	r3, r0
     26a:	d002      	beq.n	272 <deregister_tm_clones+0xe>
     26c:	4b03      	ldr	r3, [pc, #12]	; (27c <deregister_tm_clones+0x18>)
     26e:	b103      	cbz	r3, 272 <deregister_tm_clones+0xe>
     270:	4718      	bx	r3
     272:	4770      	bx	lr
     274:	0000237c 	.word	0x0000237c
     278:	0000237c 	.word	0x0000237c
     27c:	00000000 	.word	0x00000000

00000280 <register_tm_clones>:
     280:	4805      	ldr	r0, [pc, #20]	; (298 <register_tm_clones+0x18>)
     282:	4906      	ldr	r1, [pc, #24]	; (29c <register_tm_clones+0x1c>)
     284:	1a09      	subs	r1, r1, r0
     286:	1089      	asrs	r1, r1, #2
     288:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
     28c:	1049      	asrs	r1, r1, #1
     28e:	d002      	beq.n	296 <register_tm_clones+0x16>
     290:	4b03      	ldr	r3, [pc, #12]	; (2a0 <register_tm_clones+0x20>)
     292:	b103      	cbz	r3, 296 <register_tm_clones+0x16>
     294:	4718      	bx	r3
     296:	4770      	bx	lr
     298:	0000237c 	.word	0x0000237c
     29c:	0000237c 	.word	0x0000237c
     2a0:	00000000 	.word	0x00000000

000002a4 <__do_global_dtors_aux>:
     2a4:	b510      	push	{r4, lr}
     2a6:	4c06      	ldr	r4, [pc, #24]	; (2c0 <__do_global_dtors_aux+0x1c>)
     2a8:	7823      	ldrb	r3, [r4, #0]
     2aa:	b943      	cbnz	r3, 2be <__do_global_dtors_aux+0x1a>
     2ac:	f7ff ffda 	bl	264 <deregister_tm_clones>
     2b0:	4b04      	ldr	r3, [pc, #16]	; (2c4 <__do_global_dtors_aux+0x20>)
     2b2:	b113      	cbz	r3, 2ba <__do_global_dtors_aux+0x16>
     2b4:	4804      	ldr	r0, [pc, #16]	; (2c8 <__do_global_dtors_aux+0x24>)
     2b6:	f3af 8000 	nop.w
     2ba:	2301      	movs	r3, #1
     2bc:	7023      	strb	r3, [r4, #0]
     2be:	bd10      	pop	{r4, pc}
     2c0:	20000064 	.word	0x20000064
     2c4:	00000000 	.word	0x00000000
     2c8:	0000237c 	.word	0x0000237c

000002cc <frame_dummy>:
     2cc:	b508      	push	{r3, lr}
     2ce:	4b05      	ldr	r3, [pc, #20]	; (2e4 <frame_dummy+0x18>)
     2d0:	b11b      	cbz	r3, 2da <frame_dummy+0xe>
     2d2:	4905      	ldr	r1, [pc, #20]	; (2e8 <frame_dummy+0x1c>)
     2d4:	4805      	ldr	r0, [pc, #20]	; (2ec <frame_dummy+0x20>)
     2d6:	f3af 8000 	nop.w
     2da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     2de:	f7ff bfcf 	b.w	280 <register_tm_clones>
     2e2:	bf00      	nop
     2e4:	00000000 	.word	0x00000000
     2e8:	20000068 	.word	0x20000068
     2ec:	0000237c 	.word	0x0000237c

000002f0 <main>:
#include "utils/delay.h"
 
/** 
 * this examples is designed for the ATSAM E54 Xplained Pro board.
 */
int main(void) {
     2f0:	b508      	push	{r3, lr}
	 NVMCTRL_init();
     2f2:	4b1f      	ldr	r3, [pc, #124]	; (370 <main+0x80>)
     2f4:	4798      	blx	r3
	 OSCCTRL_init();
     2f6:	4b1f      	ldr	r3, [pc, #124]	; (374 <main+0x84>)
     2f8:	4798      	blx	r3
	 GCLK_init();
     2fa:	4b1f      	ldr	r3, [pc, #124]	; (378 <main+0x88>)
     2fc:	4798      	blx	r3
	 SERCOM2_init();
     2fe:	4b1f      	ldr	r3, [pc, #124]	; (37c <main+0x8c>)
     300:	4798      	blx	r3
	 print_init();
     302:	4b1f      	ldr	r3, [pc, #124]	; (380 <main+0x90>)
     304:	4798      	blx	r3
	
	// init the GPIO module to output GLCK1
	// PWM from TC7, WO0 and WO1
	// RX = PB24, TX = PB25 (for Xplained Board)
	 GPIO_init();
     306:	4b1f      	ldr	r3, [pc, #124]	; (384 <main+0x94>)
     308:	4798      	blx	r3
	
	// at this point the controller is able to output debug messages
	printf("\r\n-- SAME54 Xplained Pro boot example --\r\n");
     30a:	481f      	ldr	r0, [pc, #124]	; (388 <main+0x98>)
     30c:	4c1f      	ldr	r4, [pc, #124]	; (38c <main+0x9c>)
     30e:	47a0      	blx	r4
	printf("Built "__TIME__" at "__DATE__"\r\n\r\n");
     310:	481f      	ldr	r0, [pc, #124]	; (390 <main+0xa0>)
     312:	47a0      	blx	r4
	printf("NVMCTRL -- set wait states to manual and 5 WS.\r\n");
     314:	481f      	ldr	r0, [pc, #124]	; (394 <main+0xa4>)
     316:	47a0      	blx	r4
	printf("OSCCTRL -- XOSC1 (12 MHz) running.\r\n");
     318:	481f      	ldr	r0, [pc, #124]	; (398 <main+0xa8>)
     31a:	47a0      	blx	r4
	printf("GCLK0   -- connected to DPLL0 (120 MHz).\r\n");
     31c:	481f      	ldr	r0, [pc, #124]	; (39c <main+0xac>)
     31e:	47a0      	blx	r4
	printf("GCLK1   -- connected to DPLL1 (200 MHz).\r\n");
     320:	481f      	ldr	r0, [pc, #124]	; (3a0 <main+0xb0>)
     322:	47a0      	blx	r4
	printf("GCLK2   -- connected to DPLL1 (200 MHz), divider 200, output enabled (PB15).\r\n");
     324:	481f      	ldr	r0, [pc, #124]	; (3a4 <main+0xb4>)
     326:	47a0      	blx	r4
	printf("GCLK3   -- connected to XOSC1 ( 12 MHz).\r\n");
     328:	481f      	ldr	r0, [pc, #124]	; (3a8 <main+0xb8>)
     32a:	47a0      	blx	r4
	printf("GCLK4   -- connected to OSCULP32K (32.768 kHz).\r\n");
     32c:	481f      	ldr	r0, [pc, #124]	; (3ac <main+0xbc>)
     32e:	47a0      	blx	r4
	printf("GPIO    -- configured PMUX for GCLK1, TC7 WO0 and WO1, UART RX and TX.\r\n");
     330:	481f      	ldr	r0, [pc, #124]	; (3b0 <main+0xc0>)
     332:	47a0      	blx	r4
	printf("UART    -- initialized to 115200 baud, 8N1.\r\n");
     334:	481f      	ldr	r0, [pc, #124]	; (3b4 <main+0xc4>)
     336:	47a0      	blx	r4
	
	CCL_init();
     338:	4b1f      	ldr	r3, [pc, #124]	; (3b8 <main+0xc8>)
     33a:	4798      	blx	r3
	RTC_init();
     33c:	4b1f      	ldr	r3, [pc, #124]	; (3bc <main+0xcc>)
     33e:	4798      	blx	r3
	DPLL_init();
     340:	4b1f      	ldr	r3, [pc, #124]	; (3c0 <main+0xd0>)
     342:	4798      	blx	r3
	PWM_init();
     344:	4b1f      	ldr	r3, [pc, #124]	; (3c4 <main+0xd4>)
     346:	4798      	blx	r3
	SUPC_init();
     348:	4b1f      	ldr	r3, [pc, #124]	; (3c8 <main+0xd8>)
     34a:	4798      	blx	r3
	PM_init();
     34c:	4b1f      	ldr	r3, [pc, #124]	; (3cc <main+0xdc>)
     34e:	4798      	blx	r3
	IRQ_init();
     350:	4b1f      	ldr	r3, [pc, #124]	; (3d0 <main+0xe0>)
     352:	4798      	blx	r3
	EVSYS_init();
     354:	4b1f      	ldr	r3, [pc, #124]	; (3d4 <main+0xe4>)
     356:	4798      	blx	r3
	DAC_init();
     358:	4b1f      	ldr	r3, [pc, #124]	; (3d8 <main+0xe8>)
     35a:	4798      	blx	r3
	ADC_init();
     35c:	4b1f      	ldr	r3, [pc, #124]	; (3dc <main+0xec>)
     35e:	4798      	blx	r3
	AC_init();
     360:	4b1f      	ldr	r3, [pc, #124]	; (3e0 <main+0xf0>)
     362:	4798      	blx	r3
	
	printf("\r\n-- Finished initialization, starting app.\r\n");
     364:	481f      	ldr	r0, [pc, #124]	; (3e4 <main+0xf4>)
     366:	47a0      	blx	r4
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     368:	f3bf 8f4f 	dsb	sy
	
	
	__DSB();
	__WFI();
     36c:	bf30      	wfi
		
	while (1) {
	}
     36e:	e7fe      	b.n	36e <main+0x7e>
     370:	000009d1 	.word	0x000009d1
     374:	000009e1 	.word	0x000009e1
     378:	000008b9 	.word	0x000008b9
     37c:	00000b81 	.word	0x00000b81
     380:	00000d19 	.word	0x00000d19
     384:	000008e5 	.word	0x000008e5
     388:	0000193c 	.word	0x0000193c
     38c:	00000eed 	.word	0x00000eed
     390:	00001968 	.word	0x00001968
     394:	0000198c 	.word	0x0000198c
     398:	000019bc 	.word	0x000019bc
     39c:	000019e0 	.word	0x000019e0
     3a0:	00001a0c 	.word	0x00001a0c
     3a4:	00001a38 	.word	0x00001a38
     3a8:	00001a88 	.word	0x00001a88
     3ac:	00001ab4 	.word	0x00001ab4
     3b0:	00001ae8 	.word	0x00001ae8
     3b4:	00001b30 	.word	0x00001b30
     3b8:	000005cd 	.word	0x000005cd
     3bc:	00000ad5 	.word	0x00000ad5
     3c0:	000007c5 	.word	0x000007c5
     3c4:	00000a29 	.word	0x00000a29
     3c8:	00000c51 	.word	0x00000c51
     3cc:	000009f9 	.word	0x000009f9
     3d0:	00000955 	.word	0x00000955
     3d4:	00000885 	.word	0x00000885
     3d8:	000006dd 	.word	0x000006dd
     3dc:	00000505 	.word	0x00000505
     3e0:	00000489 	.word	0x00000489
     3e4:	00001b60 	.word	0x00001b60

000003e8 <RTC_Handler>:
}

void RTC_Handler(void) {
	RTC->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
     3e8:	4b04      	ldr	r3, [pc, #16]	; (3fc <RTC_Handler+0x14>)
     3ea:	f44f 7280 	mov.w	r2, #256	; 0x100
     3ee:	819a      	strh	r2, [r3, #12]
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     3f0:	4b03      	ldr	r3, [pc, #12]	; (400 <RTC_Handler+0x18>)
     3f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
     3f6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ClearPendingIRQ(RTC_IRQn);
}
     3fa:	4770      	bx	lr
     3fc:	40002400 	.word	0x40002400
     400:	e000e100 	.word	0xe000e100

00000404 <HardFault_Handler>:

void HardFault_Handler(void) {
	while(1);
     404:	e7fe      	b.n	404 <HardFault_Handler>
	...

00000408 <ADC1_0_Handler>:
}

void ADC1_0_Handler(void) {
     408:	b508      	push	{r3, lr}
	ADC1->INTFLAG.reg = ADC_INTFLAG_WINMON;
     40a:	4b07      	ldr	r3, [pc, #28]	; (428 <ADC1_0_Handler+0x20>)
     40c:	2204      	movs	r2, #4
     40e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
     412:	4b06      	ldr	r3, [pc, #24]	; (42c <ADC1_0_Handler+0x24>)
     414:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     418:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ClearPendingIRQ(ADC1_0_IRQn);
	//while(1);
	delay_cycles(1000);
     41c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     420:	4b03      	ldr	r3, [pc, #12]	; (430 <ADC1_0_Handler+0x28>)
     422:	4798      	blx	r3
}
     424:	bd08      	pop	{r3, pc}
     426:	bf00      	nop
     428:	43002000 	.word	0x43002000
     42c:	e000e100 	.word	0xe000e100
     430:	00000d17 	.word	0x00000d17

00000434 <ADC1_1_Handler>:

void ADC1_1_Handler(void) {
     434:	b508      	push	{r3, lr}
	ADC1->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     436:	4b07      	ldr	r3, [pc, #28]	; (454 <ADC1_1_Handler+0x20>)
     438:	2201      	movs	r2, #1
     43a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
     43e:	4b06      	ldr	r3, [pc, #24]	; (458 <ADC1_1_Handler+0x24>)
     440:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
     444:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ClearPendingIRQ(ADC1_1_IRQn);
	//while(1);
	delay_cycles(1000);
     448:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     44c:	4b03      	ldr	r3, [pc, #12]	; (45c <ADC1_1_Handler+0x28>)
     44e:	4798      	blx	r3
}
     450:	bd08      	pop	{r3, pc}
     452:	bf00      	nop
     454:	43002000 	.word	0x43002000
     458:	e000e100 	.word	0xe000e100
     45c:	00000d17 	.word	0x00000d17

00000460 <AC_Handler>:

void AC_Handler(void) {
     460:	b508      	push	{r3, lr}
	AC->INTFLAG.reg = AC_INTFLAG_COMP0;
     462:	4b06      	ldr	r3, [pc, #24]	; (47c <AC_Handler+0x1c>)
     464:	2201      	movs	r2, #1
     466:	719a      	strb	r2, [r3, #6]
     468:	4b05      	ldr	r3, [pc, #20]	; (480 <AC_Handler+0x20>)
     46a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
     46e:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ClearPendingIRQ(AC_IRQn);
	//while(1);
	delay_cycles(1000);
     472:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     476:	4b03      	ldr	r3, [pc, #12]	; (484 <AC_Handler+0x24>)
     478:	4798      	blx	r3
     47a:	bd08      	pop	{r3, pc}
     47c:	42002000 	.word	0x42002000
     480:	e000e100 	.word	0xe000e100
     484:	00000d17 	.word	0x00000d17

00000488 <AC_init>:

#include "same54.h"
#include "ac.h"

void AC_init(void) {
	MCLK->APBCMASK.bit.AC_ = 1;
     488:	4a1a      	ldr	r2, [pc, #104]	; (4f4 <AC_init+0x6c>)
     48a:	69d3      	ldr	r3, [r2, #28]
     48c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     490:	61d3      	str	r3, [r2, #28]
	GCLK->PCHCTRL[AC_GCLK_ID].reg = 
     492:	4b19      	ldr	r3, [pc, #100]	; (4f8 <AC_init+0x70>)
     494:	2243      	movs	r2, #67	; 0x43
     496:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		  GCLK_PCHCTRL_GEN_GCLK3
		| GCLK_PCHCTRL_CHEN;
	
	AC->CTRLA.bit.SWRST = 1;
     49a:	4a18      	ldr	r2, [pc, #96]	; (4fc <AC_init+0x74>)
     49c:	7813      	ldrb	r3, [r2, #0]
     49e:	f043 0301 	orr.w	r3, r3, #1
     4a2:	7013      	strb	r3, [r2, #0]
	while(AC->SYNCBUSY.bit.SWRST);
     4a4:	6a13      	ldr	r3, [r2, #32]
     4a6:	f013 0f01 	tst.w	r3, #1
     4aa:	d1fb      	bne.n	4a4 <AC_init+0x1c>
	
	AC->SCALER[0].reg = 0x1f;
     4ac:	4b13      	ldr	r3, [pc, #76]	; (4fc <AC_init+0x74>)
     4ae:	221f      	movs	r2, #31
     4b0:	731a      	strb	r2, [r3, #12]
	
	AC->CALIB.reg = AC_CALIB_BIAS0((*(uint32_t *)AC_FUSES_BIAS0_ADDR & AC_FUSES_BIAS0_Msk) >> AC_FUSES_BIAS0_Pos);
     4b2:	f04f 1280 	mov.w	r2, #8388736	; 0x800080
     4b6:	6812      	ldr	r2, [r2, #0]
     4b8:	f002 0203 	and.w	r2, r2, #3
     4bc:	849a      	strh	r2, [r3, #36]	; 0x24
	
	AC->COMPCTRL[0].reg = 
     4be:	4a10      	ldr	r2, [pc, #64]	; (500 <AC_init+0x78>)
     4c0:	611a      	str	r2, [r3, #16]
		  | AC_COMPCTRL_MUXNEG_PIN2
		  | AC_COMPCTRL_MUXPOS_VSCALE
		  | AC_COMPCTRL_RUNSTDBY
		  | AC_COMPCTRL_SINGLE
		  | AC_COMPCTRL_ENABLE;
	while(AC->SYNCBUSY.bit.COMPCTRL0);
     4c2:	461a      	mov	r2, r3
     4c4:	6a13      	ldr	r3, [r2, #32]
     4c6:	f013 0f08 	tst.w	r3, #8
     4ca:	d1fb      	bne.n	4c4 <AC_init+0x3c>
	
	AC->EVCTRL.bit.COMPEI0 = 1;
     4cc:	4b0b      	ldr	r3, [pc, #44]	; (4fc <AC_init+0x74>)
     4ce:	885a      	ldrh	r2, [r3, #2]
     4d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
     4d4:	805a      	strh	r2, [r3, #2]

	AC->INTENSET.bit.COMP0 = 1;
     4d6:	795a      	ldrb	r2, [r3, #5]
     4d8:	f042 0201 	orr.w	r2, r2, #1
     4dc:	715a      	strb	r2, [r3, #5]
	
	AC->CTRLA.bit.ENABLE = 1;
     4de:	781a      	ldrb	r2, [r3, #0]
     4e0:	f042 0202 	orr.w	r2, r2, #2
     4e4:	701a      	strb	r2, [r3, #0]
	while(AC->SYNCBUSY.bit.ENABLE);
     4e6:	461a      	mov	r2, r3
     4e8:	6a13      	ldr	r3, [r2, #32]
     4ea:	f013 0f02 	tst.w	r3, #2
     4ee:	d1fb      	bne.n	4e8 <AC_init+0x60>
	
     4f0:	4770      	bx	lr
     4f2:	bf00      	nop
     4f4:	40000800 	.word	0x40000800
     4f8:	40001c00 	.word	0x40001c00
     4fc:	42002000 	.word	0x42002000
     500:	00034246 	.word	0x00034246

00000504 <ADC_init>:
#include <stdio.h>
#include "../utils/delay.h"
#include "adc.h"


void ADC_init(void) {
     504:	b508      	push	{r3, lr}
	
	MCLK->APBDMASK.bit.ADC1_ = 1;
     506:	4a2d      	ldr	r2, [pc, #180]	; (5bc <ADC_init+0xb8>)
     508:	6a13      	ldr	r3, [r2, #32]
     50a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     50e:	6213      	str	r3, [r2, #32]
	GCLK->PCHCTRL[ADC1_GCLK_ID].reg = GCLK_PCHCTRL_GEN_GCLK3 | GCLK_PCHCTRL_CHEN;
     510:	4b2b      	ldr	r3, [pc, #172]	; (5c0 <ADC_init+0xbc>)
     512:	2243      	movs	r2, #67	; 0x43
     514:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	
	ADC1->CTRLA.reg = ADC_CTRLA_SWRST;
     518:	4b2a      	ldr	r3, [pc, #168]	; (5c4 <ADC_init+0xc0>)
     51a:	2201      	movs	r2, #1
     51c:	801a      	strh	r2, [r3, #0]
	while(ADC1->SYNCBUSY.bit.SWRST);
     51e:	461a      	mov	r2, r3
     520:	6b13      	ldr	r3, [r2, #48]	; 0x30
     522:	f013 0f01 	tst.w	r3, #1
     526:	d1fb      	bne.n	520 <ADC_init+0x1c>
	
	ADC1->CTRLA.reg =
     528:	4b26      	ldr	r3, [pc, #152]	; (5c4 <ADC_init+0xc0>)
     52a:	22c0      	movs	r2, #192	; 0xc0
     52c:	801a      	strh	r2, [r3, #0]
		 ADC_CTRLA_ONDEMAND
		| ADC_CTRLA_PRESCALER_DIV2
		| ADC_CTRLA_RUNSTDBY;

	ADC1->CTRLB.reg = 
     52e:	f44f 6210 	mov.w	r2, #2304	; 0x900
     532:	80da      	strh	r2, [r3, #6]
		  ADC_CTRLB_WINSS
		| ADC_CTRLB_WINMODE_MODE1;
	while(ADC1->SYNCBUSY.bit.CTRLB);
     534:	461a      	mov	r2, r3
     536:	6b13      	ldr	r3, [r2, #48]	; 0x30
     538:	f013 0f08 	tst.w	r3, #8
     53c:	d1fb      	bne.n	536 <ADC_init+0x32>
		
	ADC1->INPUTCTRL.reg = 
     53e:	4b21      	ldr	r3, [pc, #132]	; (5c4 <ADC_init+0xc0>)
     540:	f641 0206 	movw	r2, #6150	; 0x1806
     544:	809a      	strh	r2, [r3, #4]
		  ADC_INPUTCTRL_MUXNEG_GND
		| ADC_INPUTCTRL_MUXPOS_AIN6;
	while(ADC1->SYNCBUSY.bit.INPUTCTRL);
     546:	461a      	mov	r2, r3
     548:	6b13      	ldr	r3, [r2, #48]	; 0x30
     54a:	f013 0f04 	tst.w	r3, #4
     54e:	d1fb      	bne.n	548 <ADC_init+0x44>
	
	ADC1->REFCTRL.reg = ADC_REFCTRL_REFSEL_INTREF;
     550:	4b1c      	ldr	r3, [pc, #112]	; (5c4 <ADC_init+0xc0>)
     552:	2200      	movs	r2, #0
     554:	721a      	strb	r2, [r3, #8]
	while(ADC1->SYNCBUSY.bit.REFCTRL);
     556:	461a      	mov	r2, r3
     558:	6b13      	ldr	r3, [r2, #48]	; 0x30
     55a:	f013 0f10 	tst.w	r3, #16
     55e:	d1fb      	bne.n	558 <ADC_init+0x54>
	
	ADC1->WINLT.reg = 1024;
     560:	4b18      	ldr	r3, [pc, #96]	; (5c4 <ADC_init+0xc0>)
     562:	f44f 6280 	mov.w	r2, #1024	; 0x400
     566:	819a      	strh	r2, [r3, #12]
	while(ADC1->SYNCBUSY.bit.WINLT);
     568:	461a      	mov	r2, r3
     56a:	6b13      	ldr	r3, [r2, #48]	; 0x30
     56c:	f013 0f80 	tst.w	r3, #128	; 0x80
     570:	d1fb      	bne.n	56a <ADC_init+0x66>
	
	ADC1->CALIB.reg =
		  ADC_CALIB_BIASCOMP((*(uint32_t *)ADC1_FUSES_BIASCOMP_ADDR & ADC1_FUSES_BIASCOMP_Msk) >> ADC1_FUSES_BIASCOMP_Pos)
     572:	f04f 1380 	mov.w	r3, #8388736	; 0x800080
     576:	6819      	ldr	r1, [r3, #0]
		| ADC_CALIB_BIASR2R((*(uint32_t *)ADC1_FUSES_BIASR2R_ADDR & ADC1_FUSES_BIASR2R_Msk) >> ADC1_FUSES_BIASR2R_Pos)
     578:	0d8a      	lsrs	r2, r1, #22
     57a:	0113      	lsls	r3, r2, #4
     57c:	f003 0370 	and.w	r3, r3, #112	; 0x70
		| ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC1_FUSES_BIASREFBUF_ADDR & ADC1_FUSES_BIASR2R_Msk) >> ADC1_FUSES_BIASR2R_Pos);
     580:	0212      	lsls	r2, r2, #8
     582:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
     586:	4313      	orrs	r3, r2
		  ADC_CALIB_BIASCOMP((*(uint32_t *)ADC1_FUSES_BIASCOMP_ADDR & ADC1_FUSES_BIASCOMP_Msk) >> ADC1_FUSES_BIASCOMP_Pos)
     588:	f3c1 4102 	ubfx	r1, r1, #16, #3
		| ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC1_FUSES_BIASREFBUF_ADDR & ADC1_FUSES_BIASR2R_Msk) >> ADC1_FUSES_BIASR2R_Pos);
     58c:	430b      	orrs	r3, r1
	ADC1->CALIB.reg =
     58e:	4a0d      	ldr	r2, [pc, #52]	; (5c4 <ADC_init+0xc0>)
     590:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
					
	ADC1->EVCTRL.reg = ADC_EVCTRL_STARTEI;
     594:	2302      	movs	r3, #2
     596:	7093      	strb	r3, [r2, #2]
		
	ADC1->CTRLA.reg |= ADC_CTRLA_ENABLE;
     598:	8813      	ldrh	r3, [r2, #0]
     59a:	f043 0302 	orr.w	r3, r3, #2
     59e:	8013      	strh	r3, [r2, #0]
	while(ADC1->SYNCBUSY.bit.ENABLE);
     5a0:	6b13      	ldr	r3, [r2, #48]	; 0x30
     5a2:	f013 0f02 	tst.w	r3, #2
     5a6:	d1fb      	bne.n	5a0 <ADC_init+0x9c>

	delay_ms(2);
     5a8:	2002      	movs	r0, #2
     5aa:	4b07      	ldr	r3, [pc, #28]	; (5c8 <ADC_init+0xc4>)
     5ac:	4798      	blx	r3

	while(ADC1->STATUS.bit.ADCBUSY);	
     5ae:	4a05      	ldr	r2, [pc, #20]	; (5c4 <ADC_init+0xc0>)
     5b0:	f892 302f 	ldrb.w	r3, [r2, #47]	; 0x2f
     5b4:	f013 0f01 	tst.w	r3, #1
     5b8:	d1fa      	bne.n	5b0 <ADC_init+0xac>
     5ba:	bd08      	pop	{r3, pc}
     5bc:	40000800 	.word	0x40000800
     5c0:	40001c00 	.word	0x40001c00
     5c4:	43002000 	.word	0x43002000
     5c8:	00000d15 	.word	0x00000d15

000005cc <CCL_init>:

/**
 * init CLC
 * to invert SERCOM2 RX/TX signal
 */
void CCL_init(void) {
     5cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	MCLK->APBCMASK.bit.CCL_ = 1;
     5ce:	4a39      	ldr	r2, [pc, #228]	; (6b4 <CCL_init+0xe8>)
     5d0:	69d3      	ldr	r3, [r2, #28]
     5d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     5d6:	61d3      	str	r3, [r2, #28]
	printf("CCL     -- unmask CCL to enable interface on APBC.\r\n");
     5d8:	4837      	ldr	r0, [pc, #220]	; (6b8 <CCL_init+0xec>)
     5da:	4d38      	ldr	r5, [pc, #224]	; (6bc <CCL_init+0xf0>)
     5dc:	47a8      	blx	r5
	
	GCLK->PCHCTRL[CCL_GCLK_ID].reg = GCLK_PCHCTRL_GEN_GCLK3 | GCLK_PCHCTRL_CHEN;
     5de:	4b38      	ldr	r3, [pc, #224]	; (6c0 <CCL_init+0xf4>)
     5e0:	2243      	movs	r2, #67	; 0x43
     5e2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	printf("CCL     -- connect GCLK3 to CCL.\r\n");
     5e6:	4837      	ldr	r0, [pc, #220]	; (6c4 <CCL_init+0xf8>)
     5e8:	47a8      	blx	r5
	
	CCL->LUTCTRL[0].bit.INSEL0 = CCL_LUTCTRL_INSEL0_IO_Val;
     5ea:	4c37      	ldr	r4, [pc, #220]	; (6c8 <CCL_init+0xfc>)
     5ec:	68a3      	ldr	r3, [r4, #8]
     5ee:	2204      	movs	r2, #4
     5f0:	f362 230b 	bfi	r3, r2, #8, #4
     5f4:	60a3      	str	r3, [r4, #8]
	CCL->LUTCTRL[0].bit.INSEL1 = CCL_LUTCTRL_INSEL2_MASK_Val;
     5f6:	68a3      	ldr	r3, [r4, #8]
     5f8:	f36f 330f 	bfc	r3, #12, #4
     5fc:	60a3      	str	r3, [r4, #8]
	CCL->LUTCTRL[0].bit.INSEL2 = CCL_LUTCTRL_INSEL2_MASK_Val;
     5fe:	68a3      	ldr	r3, [r4, #8]
     600:	f36f 4313 	bfc	r3, #16, #4
     604:	60a3      	str	r3, [r4, #8]
	CCL->LUTCTRL[0].bit.LUTEI = 0;
     606:	68a3      	ldr	r3, [r4, #8]
     608:	f36f 5355 	bfc	r3, #21, #1
     60c:	60a3      	str	r3, [r4, #8]
	CCL->LUTCTRL[0].bit.LUTEO = 0;
     60e:	68a3      	ldr	r3, [r4, #8]
     610:	f36f 5396 	bfc	r3, #22, #1
     614:	60a3      	str	r3, [r4, #8]
	CCL->LUTCTRL[0].bit.EDGESEL = 0;
     616:	68a3      	ldr	r3, [r4, #8]
     618:	f36f 13c7 	bfc	r3, #7, #1
     61c:	60a3      	str	r3, [r4, #8]
	CCL->LUTCTRL[0].bit.FILTSEL = CCL_LUTCTRL_FILTSEL_DISABLE_Val;
     61e:	68a3      	ldr	r3, [r4, #8]
     620:	f36f 1305 	bfc	r3, #4, #2
     624:	60a3      	str	r3, [r4, #8]
	CCL->SEQCTRL[0].bit.SEQSEL = CCL_SEQCTRL_SEQSEL_DISABLE_Val;
     626:	7923      	ldrb	r3, [r4, #4]
     628:	f36f 0303 	bfc	r3, #0, #4
     62c:	7123      	strb	r3, [r4, #4]
	printf("CCL     -- configure input of LUT[0], IN[0] is IO.\r\n");
     62e:	4827      	ldr	r0, [pc, #156]	; (6cc <CCL_init+0x100>)
     630:	47a8      	blx	r5
	
	CCL->LUTCTRL[0].bit.TRUTH = 0x01;
     632:	68a3      	ldr	r3, [r4, #8]
     634:	2701      	movs	r7, #1
     636:	f367 631f 	bfi	r3, r7, #24, #8
     63a:	60a3      	str	r3, [r4, #8]
	CCL->LUTCTRL[0].bit.ENABLE = 1;
     63c:	68a3      	ldr	r3, [r4, #8]
     63e:	f043 0302 	orr.w	r3, r3, #2
     642:	60a3      	str	r3, [r4, #8]
	printf("CCL     -- configure and enable LUT[0], inverting input.\r\n");
     644:	4e22      	ldr	r6, [pc, #136]	; (6d0 <CCL_init+0x104>)
     646:	4630      	mov	r0, r6
     648:	47a8      	blx	r5
	
	CCL->LUTCTRL[2].bit.INSEL0 = CCL_LUTCTRL_INSEL2_SERCOM_Val;
     64a:	6923      	ldr	r3, [r4, #16]
     64c:	2209      	movs	r2, #9
     64e:	f362 230b 	bfi	r3, r2, #8, #4
     652:	6123      	str	r3, [r4, #16]
	CCL->LUTCTRL[2].bit.INSEL1 = CCL_LUTCTRL_INSEL2_MASK_Val;
     654:	6923      	ldr	r3, [r4, #16]
     656:	f36f 330f 	bfc	r3, #12, #4
     65a:	6123      	str	r3, [r4, #16]
	CCL->LUTCTRL[2].bit.INSEL2 = CCL_LUTCTRL_INSEL2_MASK_Val;
     65c:	6923      	ldr	r3, [r4, #16]
     65e:	f36f 4313 	bfc	r3, #16, #4
     662:	6123      	str	r3, [r4, #16]
	CCL->LUTCTRL[2].bit.LUTEI = 0;
     664:	6923      	ldr	r3, [r4, #16]
     666:	f36f 5355 	bfc	r3, #21, #1
     66a:	6123      	str	r3, [r4, #16]
	CCL->LUTCTRL[2].bit.LUTEO = 0;
     66c:	6923      	ldr	r3, [r4, #16]
     66e:	f36f 5396 	bfc	r3, #22, #1
     672:	6123      	str	r3, [r4, #16]
	CCL->LUTCTRL[2].bit.EDGESEL = 0;
     674:	6923      	ldr	r3, [r4, #16]
     676:	f36f 13c7 	bfc	r3, #7, #1
     67a:	6123      	str	r3, [r4, #16]
	CCL->LUTCTRL[2].bit.FILTSEL = CCL_LUTCTRL_FILTSEL_DISABLE_Val;
     67c:	6923      	ldr	r3, [r4, #16]
     67e:	f36f 1305 	bfc	r3, #4, #2
     682:	6123      	str	r3, [r4, #16]
	CCL->SEQCTRL[1].bit.SEQSEL = CCL_SEQCTRL_SEQSEL_DISABLE_Val;
     684:	7963      	ldrb	r3, [r4, #5]
     686:	f36f 0303 	bfc	r3, #0, #4
     68a:	7163      	strb	r3, [r4, #5]
	printf("CCL     -- configure input of LUT[0], IN[0] is SERCOM2, Pad 0.\r\n");
     68c:	4811      	ldr	r0, [pc, #68]	; (6d4 <CCL_init+0x108>)
     68e:	47a8      	blx	r5
	
	CCL->LUTCTRL[2].bit.TRUTH = 0x01;
     690:	6923      	ldr	r3, [r4, #16]
     692:	f367 631f 	bfi	r3, r7, #24, #8
     696:	6123      	str	r3, [r4, #16]
	CCL->LUTCTRL[2].bit.ENABLE = 1;
     698:	6923      	ldr	r3, [r4, #16]
     69a:	f043 0302 	orr.w	r3, r3, #2
     69e:	6123      	str	r3, [r4, #16]
	printf("CCL     -- configure and enable LUT[0], inverting input.\r\n");
     6a0:	4630      	mov	r0, r6
     6a2:	47a8      	blx	r5
	
	CCL->CTRL.bit.ENABLE = 1;
     6a4:	7823      	ldrb	r3, [r4, #0]
     6a6:	f043 0302 	orr.w	r3, r3, #2
     6aa:	7023      	strb	r3, [r4, #0]
	printf("CCL     -- enable CCL.\r\n");
     6ac:	480a      	ldr	r0, [pc, #40]	; (6d8 <CCL_init+0x10c>)
     6ae:	47a8      	blx	r5
     6b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     6b2:	bf00      	nop
     6b4:	40000800 	.word	0x40000800
     6b8:	00001b90 	.word	0x00001b90
     6bc:	00000eed 	.word	0x00000eed
     6c0:	40001c00 	.word	0x40001c00
     6c4:	00001bc4 	.word	0x00001bc4
     6c8:	42003800 	.word	0x42003800
     6cc:	00001be8 	.word	0x00001be8
     6d0:	00001c1c 	.word	0x00001c1c
     6d4:	00001c58 	.word	0x00001c58
     6d8:	00001c98 	.word	0x00001c98

000006dc <DAC_init>:

#include <sam.h>
#include <stdio.h>
#include "dac.h"

void DAC_init(void) {
     6dc:	b538      	push	{r3, r4, r5, lr}
	MCLK->APBDMASK.bit.DAC_ = 1;
     6de:	4a2e      	ldr	r2, [pc, #184]	; (798 <DAC_init+0xbc>)
     6e0:	6a13      	ldr	r3, [r2, #32]
     6e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     6e6:	6213      	str	r3, [r2, #32]
	printf("DAC     -- unmask DAC to enable interface on APBD.\r\n");
     6e8:	482c      	ldr	r0, [pc, #176]	; (79c <DAC_init+0xc0>)
     6ea:	4b2d      	ldr	r3, [pc, #180]	; (7a0 <DAC_init+0xc4>)
     6ec:	4798      	blx	r3
	
	GCLK->PCHCTRL[DAC_GCLK_ID].bit.GEN = GCLK_PCHCTRL_GEN_GCLK3_Val;
     6ee:	4b2d      	ldr	r3, [pc, #180]	; (7a4 <DAC_init+0xc8>)
     6f0:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
     6f4:	2103      	movs	r1, #3
     6f6:	f361 0203 	bfi	r2, r1, #0, #4
     6fa:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	GCLK->PCHCTRL[DAC_GCLK_ID].bit.CHEN = 1;
     6fe:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
     702:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     706:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	while(!(GCLK->PCHCTRL[DAC_GCLK_ID].bit.CHEN));
     70a:	461a      	mov	r2, r3
     70c:	f8d2 3128 	ldr.w	r3, [r2, #296]	; 0x128
     710:	f013 0f40 	tst.w	r3, #64	; 0x40
     714:	d0fa      	beq.n	70c <DAC_init+0x30>
	printf("DAC     -- connect GLCK3 to DAC.\r\n");
     716:	4824      	ldr	r0, [pc, #144]	; (7a8 <DAC_init+0xcc>)
     718:	4b21      	ldr	r3, [pc, #132]	; (7a0 <DAC_init+0xc4>)
     71a:	4798      	blx	r3
	
	DAC->CTRLA.bit.SWRST = 1;
     71c:	4a23      	ldr	r2, [pc, #140]	; (7ac <DAC_init+0xd0>)
     71e:	7813      	ldrb	r3, [r2, #0]
     720:	f043 0301 	orr.w	r3, r3, #1
     724:	7013      	strb	r3, [r2, #0]
	while(DAC->SYNCBUSY.bit.SWRST);
     726:	6893      	ldr	r3, [r2, #8]
     728:	f013 0f01 	tst.w	r3, #1
     72c:	d1fb      	bne.n	726 <DAC_init+0x4a>
	while(DAC->CTRLA.bit.SWRST);
     72e:	4a1f      	ldr	r2, [pc, #124]	; (7ac <DAC_init+0xd0>)
     730:	7813      	ldrb	r3, [r2, #0]
     732:	f013 0f01 	tst.w	r3, #1
     736:	d1fb      	bne.n	730 <DAC_init+0x54>
	printf("DAC     -- issue a software reset.\r\n");
     738:	481d      	ldr	r0, [pc, #116]	; (7b0 <DAC_init+0xd4>)
     73a:	4d19      	ldr	r5, [pc, #100]	; (7a0 <DAC_init+0xc4>)
     73c:	47a8      	blx	r5
	
	DAC->CTRLB.bit.REFSEL = DAC_CTRLB_REFSEL_VREFPU;
     73e:	4c1b      	ldr	r4, [pc, #108]	; (7ac <DAC_init+0xd0>)
     740:	7863      	ldrb	r3, [r4, #1]
     742:	f36f 0342 	bfc	r3, #1, #2
     746:	7063      	strb	r3, [r4, #1]
	DAC->DACCTRL[0].bit.CCTRL = DAC_DACCTRL_CCTRL_CC12M_Val;
     748:	89a3      	ldrh	r3, [r4, #12]
     74a:	2202      	movs	r2, #2
     74c:	f362 0383 	bfi	r3, r2, #2, #2
     750:	81a3      	strh	r3, [r4, #12]
	DAC->DACCTRL[0].bit.ENABLE = 1;
     752:	89a3      	ldrh	r3, [r4, #12]
     754:	4313      	orrs	r3, r2
     756:	81a3      	strh	r3, [r4, #12]
	DAC->DACCTRL[0].bit.REFRESH = 1;
     758:	89a3      	ldrh	r3, [r4, #12]
     75a:	2201      	movs	r2, #1
     75c:	f362 230b 	bfi	r3, r2, #8, #4
     760:	81a3      	strh	r3, [r4, #12]
	DAC->DACCTRL[0].bit.RUNSTDBY = 1;
     762:	89a3      	ldrh	r3, [r4, #12]
     764:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     768:	81a3      	strh	r3, [r4, #12]
	printf("DAC     -- select unbuffered external reference.\r\n");
     76a:	4812      	ldr	r0, [pc, #72]	; (7b4 <DAC_init+0xd8>)
     76c:	47a8      	blx	r5
	printf("DAC     -- current control to 1MBps mode.\r\n");
     76e:	4812      	ldr	r0, [pc, #72]	; (7b8 <DAC_init+0xdc>)
     770:	47a8      	blx	r5
	printf("DAC     -- Enable DAC0 with auto refresh every 30us.\r\n");
     772:	4812      	ldr	r0, [pc, #72]	; (7bc <DAC_init+0xe0>)
     774:	47a8      	blx	r5
	
	DAC->CTRLA.bit.ENABLE = 1;
     776:	7823      	ldrb	r3, [r4, #0]
     778:	f043 0302 	orr.w	r3, r3, #2
     77c:	7023      	strb	r3, [r4, #0]
	while(DAC->SYNCBUSY.bit.ENABLE);
     77e:	4622      	mov	r2, r4
     780:	6893      	ldr	r3, [r2, #8]
     782:	f013 0f02 	tst.w	r3, #2
     786:	d1fb      	bne.n	780 <DAC_init+0xa4>
	printf("DAC     -- Enable DAC controller.\r\n");
     788:	480d      	ldr	r0, [pc, #52]	; (7c0 <DAC_init+0xe4>)
     78a:	4b05      	ldr	r3, [pc, #20]	; (7a0 <DAC_init+0xc4>)
     78c:	4798      	blx	r3
	
	DAC->DATA[0].reg = 0x0800;
     78e:	4b07      	ldr	r3, [pc, #28]	; (7ac <DAC_init+0xd0>)
     790:	f44f 6200 	mov.w	r2, #2048	; 0x800
     794:	821a      	strh	r2, [r3, #16]
     796:	bd38      	pop	{r3, r4, r5, pc}
     798:	40000800 	.word	0x40000800
     79c:	00001cb0 	.word	0x00001cb0
     7a0:	00000eed 	.word	0x00000eed
     7a4:	40001c00 	.word	0x40001c00
     7a8:	00001ce4 	.word	0x00001ce4
     7ac:	43002400 	.word	0x43002400
     7b0:	00001d08 	.word	0x00001d08
     7b4:	00001d2c 	.word	0x00001d2c
     7b8:	00001d60 	.word	0x00001d60
     7bc:	00001d8c 	.word	0x00001d8c
     7c0:	00001dc4 	.word	0x00001dc4

000007c4 <DPLL_init>:
/**
 * init DPLL0 and DPLL1
 * clock input is XOSC1, which will by divided by 4 beforehand
 * maximum clock input frequency is 3 MHz
 */
void DPLL_init(void) {
     7c4:	b538      	push	{r3, r4, r5, lr}
	
	// ****** DPLL0 ****** //
	// divide XOSC1 clock (12 MHz) by 4 (max input is 3.2 MHz!)
	OSCCTRL->Dpll[0].DPLLCTRLB.reg = OSCCTRL_DPLLCTRLB_DIV(1) | OSCCTRL_DPLLCTRLB_REFCLK(0x03);
     7c6:	4c25      	ldr	r4, [pc, #148]	; (85c <DPLL_init+0x98>)
     7c8:	4b25      	ldr	r3, [pc, #148]	; (860 <DPLL_init+0x9c>)
     7ca:	63a3      	str	r3, [r4, #56]	; 0x38
	printf("DPLL0   -- set reference to XOSC1 and divide by 4.\r\n");
     7cc:	4825      	ldr	r0, [pc, #148]	; (864 <DPLL_init+0xa0>)
     7ce:	4b26      	ldr	r3, [pc, #152]	; (868 <DPLL_init+0xa4>)
     7d0:	4798      	blx	r3
	
	// this register is write-synchronized, wait for syncbusy to clear
	OSCCTRL->Dpll[0].DPLLRATIO.reg = OSCCTRL_DPLLRATIO_LDR(39);
     7d2:	2327      	movs	r3, #39	; 0x27
     7d4:	6363      	str	r3, [r4, #52]	; 0x34
	while(OSCCTRL->Dpll[0].DPLLSYNCBUSY.bit.DPLLRATIO);
     7d6:	4622      	mov	r2, r4
     7d8:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
     7da:	f013 0f04 	tst.w	r3, #4
     7de:	d1fb      	bne.n	7d8 <DPLL_init+0x14>
	printf("DPLL0   -- set multiplier to 40.\r\n");
     7e0:	4822      	ldr	r0, [pc, #136]	; (86c <DPLL_init+0xa8>)
     7e2:	4b21      	ldr	r3, [pc, #132]	; (868 <DPLL_init+0xa4>)
     7e4:	4798      	blx	r3
	
	OSCCTRL->Dpll[0].DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_ENABLE;
     7e6:	4b1d      	ldr	r3, [pc, #116]	; (85c <DPLL_init+0x98>)
     7e8:	2202      	movs	r2, #2
     7ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	while(OSCCTRL->Dpll[0].DPLLSYNCBUSY.bit.ENABLE);
     7ee:	461a      	mov	r2, r3
     7f0:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
     7f2:	f013 0f02 	tst.w	r3, #2
     7f6:	d1fb      	bne.n	7f0 <DPLL_init+0x2c>
	while(!(OSCCTRL->Dpll[0].DPLLSTATUS.bit.LOCK || OSCCTRL->Dpll[0].DPLLSTATUS.bit.CLKRDY));
     7f8:	4b18      	ldr	r3, [pc, #96]	; (85c <DPLL_init+0x98>)
     7fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
     7fc:	f012 0f01 	tst.w	r2, #1
     800:	d103      	bne.n	80a <DPLL_init+0x46>
     802:	6c1a      	ldr	r2, [r3, #64]	; 0x40
     804:	f012 0f02 	tst.w	r2, #2
     808:	d0f7      	beq.n	7fa <DPLL_init+0x36>
	printf("DPLL0   -- enable DPLL0 and wait for lock.\r\n");
     80a:	4819      	ldr	r0, [pc, #100]	; (870 <DPLL_init+0xac>)
     80c:	4d16      	ldr	r5, [pc, #88]	; (868 <DPLL_init+0xa4>)
     80e:	47a8      	blx	r5
	
	// ****** DPLL1 ****** //
	OSCCTRL->Dpll[1].DPLLCTRLB.reg = OSCCTRL_DPLLCTRLB_DIV(2) | OSCCTRL_DPLLCTRLB_REFCLK(0x03);
     810:	4c12      	ldr	r4, [pc, #72]	; (85c <DPLL_init+0x98>)
     812:	4b18      	ldr	r3, [pc, #96]	; (874 <DPLL_init+0xb0>)
     814:	64e3      	str	r3, [r4, #76]	; 0x4c
	printf("DPLL1   -- set reference to XOSC1 and divide by 6.\r\n");
     816:	4818      	ldr	r0, [pc, #96]	; (878 <DPLL_init+0xb4>)
     818:	47a8      	blx	r5
	
	OSCCTRL->Dpll[1].DPLLRATIO.reg = OSCCTRL_DPLLRATIO_LDR(99);
     81a:	2363      	movs	r3, #99	; 0x63
     81c:	64a3      	str	r3, [r4, #72]	; 0x48
	while(OSCCTRL->Dpll[1].DPLLSYNCBUSY.bit.DPLLRATIO);
     81e:	4622      	mov	r2, r4
     820:	6d13      	ldr	r3, [r2, #80]	; 0x50
     822:	f013 0f04 	tst.w	r3, #4
     826:	d1fb      	bne.n	820 <DPLL_init+0x5c>
	printf("DPLL1   -- set multiplier to 100.\r\n");
     828:	4814      	ldr	r0, [pc, #80]	; (87c <DPLL_init+0xb8>)
     82a:	4b0f      	ldr	r3, [pc, #60]	; (868 <DPLL_init+0xa4>)
     82c:	4798      	blx	r3
	
	OSCCTRL->Dpll[1].DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_ENABLE;
     82e:	4b0b      	ldr	r3, [pc, #44]	; (85c <DPLL_init+0x98>)
     830:	2202      	movs	r2, #2
     832:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	while(OSCCTRL->Dpll[1].DPLLSYNCBUSY.bit.ENABLE);
     836:	461a      	mov	r2, r3
     838:	6d13      	ldr	r3, [r2, #80]	; 0x50
     83a:	f013 0f02 	tst.w	r3, #2
     83e:	d1fb      	bne.n	838 <DPLL_init+0x74>
	while(!(OSCCTRL->Dpll[1].DPLLSTATUS.bit.LOCK || OSCCTRL->Dpll[1].DPLLSTATUS.bit.CLKRDY));
     840:	4b06      	ldr	r3, [pc, #24]	; (85c <DPLL_init+0x98>)
     842:	6d5a      	ldr	r2, [r3, #84]	; 0x54
     844:	f012 0f01 	tst.w	r2, #1
     848:	d103      	bne.n	852 <DPLL_init+0x8e>
     84a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
     84c:	f012 0f02 	tst.w	r2, #2
     850:	d0f7      	beq.n	842 <DPLL_init+0x7e>
	printf("DPLL1   -- enable DPLL1 and wait for lock.\r\n");
     852:	480b      	ldr	r0, [pc, #44]	; (880 <DPLL_init+0xbc>)
     854:	4b04      	ldr	r3, [pc, #16]	; (868 <DPLL_init+0xa4>)
     856:	4798      	blx	r3
     858:	bd38      	pop	{r3, r4, r5, pc}
     85a:	bf00      	nop
     85c:	40001000 	.word	0x40001000
     860:	00010060 	.word	0x00010060
     864:	00001de8 	.word	0x00001de8
     868:	00000eed 	.word	0x00000eed
     86c:	00001e1c 	.word	0x00001e1c
     870:	00001e40 	.word	0x00001e40
     874:	00020060 	.word	0x00020060
     878:	00001e6c 	.word	0x00001e6c
     87c:	00001ea0 	.word	0x00001ea0
     880:	00001ec4 	.word	0x00001ec4

00000884 <EVSYS_init>:
#include <sam.h>
#include <stdio.h>
#include "evsys.h"

void EVSYS_init(void) {
	MCLK->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     884:	4a09      	ldr	r2, [pc, #36]	; (8ac <EVSYS_init+0x28>)
     886:	6993      	ldr	r3, [r2, #24]
     888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     88c:	6193      	str	r3, [r2, #24]
	
	GCLK->PCHCTRL[EVSYS_GCLK_ID_0].reg = GCLK_PCHCTRL_GEN_GCLK0 | (1 << GCLK_PCHCTRL_CHEN_Pos);
     88e:	4b08      	ldr	r3, [pc, #32]	; (8b0 <EVSYS_init+0x2c>)
     890:	2240      	movs	r2, #64	; 0x40
     892:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	
	EVSYS->CTRLA.reg = EVSYS_CTRLA_SWRST;
     896:	4b07      	ldr	r3, [pc, #28]	; (8b4 <EVSYS_init+0x30>)
     898:	2201      	movs	r2, #1
     89a:	701a      	strb	r2, [r3, #0]
	
	EVSYS->USER[57].reg = 0x01; // channel 0: ADC1 start conversion
     89c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	EVSYS->USER[59].reg = 0x01; // channel 0: AC0 start compare
     8a0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	
	EVSYS->Channel[0].CHANNEL.reg =
     8a4:	f24c 220c 	movw	r2, #49676	; 0xc20c
     8a8:	621a      	str	r2, [r3, #32]
		| EVSYS_CHANNEL_ONDEMAND
		| EVSYS_CHANNEL_RUNSTDBY
		| EVSYS_CHANNEL_PATH_ASYNCHRONOUS
		| EVSYS_CHANNEL_EVGEN(0x0c); // RTC COMP0
	
     8aa:	4770      	bx	lr
     8ac:	40000800 	.word	0x40000800
     8b0:	40001c00 	.word	0x40001c00
     8b4:	4100e000 	.word	0x4100e000

000008b8 <GCLK_init>:
 * connect GCLK4 to XOSC32K (32.768 kHz) => for RTC and SERCOM slow
 */
void GCLK_init(void) {
	// GCLK0: source is FDPLL0, no divisor
	// for main clock
	GCLK->GENCTRL[0].reg =
     8b8:	4b06      	ldr	r3, [pc, #24]	; (8d4 <GCLK_init+0x1c>)
     8ba:	f240 1207 	movw	r2, #263	; 0x107
     8be:	621a      	str	r2, [r3, #32]
		  GCLK_GENCTRL_GENEN
		| GCLK_GENCTRL_SRC_DPLL0;

	// GLCK1: source is FDPLL1, divided by 200, Output enabled (PB15)
	// to assert right PLL clocking with an output pin
	GCLK->GENCTRL[1].reg =
     8c0:	4a05      	ldr	r2, [pc, #20]	; (8d8 <GCLK_init+0x20>)
     8c2:	625a      	str	r2, [r3, #36]	; 0x24
		| GCLK_GENCTRL_OE
		| GCLK_GENCTRL_SRC_DPLL1;
	
	// GLCK2: source is FDPLL1, divided by 2
	// for PWM TC7 (max 100 MHz)
	GCLK->GENCTRL[2].reg =
     8c4:	4a05      	ldr	r2, [pc, #20]	; (8dc <GCLK_init+0x24>)
     8c6:	629a      	str	r2, [r3, #40]	; 0x28
		| GCLK_GENCTRL_DIV(2)
		| GCLK_GENCTRL_SRC_DPLL1;

	// GLCK3: source is XOSC1
	// for SERCOM
	GCLK->GENCTRL[3].reg =
     8c8:	4a05      	ldr	r2, [pc, #20]	; (8e0 <GCLK_init+0x28>)
     8ca:	62da      	str	r2, [r3, #44]	; 0x2c
		  GCLK_GENCTRL_GENEN
		| GCLK_GENCTRL_DIV(1)
		| GCLK_GENCTRL_SRC_XOSC1;

	//GCLK4: source is internal 32K
	GCLK->GENCTRL[4].reg =
     8cc:	3203      	adds	r2, #3
     8ce:	631a      	str	r2, [r3, #48]	; 0x30
		  GCLK_GENCTRL_GENEN
		| GCLK_GENCTRL_DIV(1)
		| GCLK_GENCTRL_SRC_OSCULP32K;
     8d0:	4770      	bx	lr
     8d2:	bf00      	nop
     8d4:	40001c00 	.word	0x40001c00
     8d8:	00c80908 	.word	0x00c80908
     8dc:	00020108 	.word	0x00020108
     8e0:	00010101 	.word	0x00010101

000008e4 <GPIO_init>:
 */
void GPIO_init(void) {
	
	// hold down RC21 to disable PHY for correct power-down readings
	// hw fix: remove R602, replace C613 with 100k resistor
	PORT->Group[GPIO_PORTC].DIRSET.reg = (1 << 21);
     8e4:	4b18      	ldr	r3, [pc, #96]	; (948 <GPIO_init+0x64>)
     8e6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
     8ea:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	PORT->Group[GPIO_PORTC].OUTCLR.reg = (1 << 21);
     8ee:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	
	// set GCLK1 output
	PORT->Group[GPIO_PORTB].WRCONFIG.reg =
     8f2:	4a16      	ldr	r2, [pc, #88]	; (94c <GPIO_init+0x68>)
     8f4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		| PORT_WRCONFIG_PMUXEN
		| PORT_WRCONFIG_WRPINCFG
		| ((1 << 15) & 0xffff);
	
	// set PWM WO0 output
	PORT->Group[GPIO_PORTB].WRCONFIG.reg =
     8f8:	4a15      	ldr	r2, [pc, #84]	; (950 <GPIO_init+0x6c>)
     8fa:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		| PORT_WRCONFIG_PMUXEN
		| PORT_WRCONFIG_WRPINCFG
		| ((1 << 0) & 0xffff);
	
	// set PWM WO1 output
	PORT->Group[GPIO_PORTB].WRCONFIG.reg =
     8fe:	3201      	adds	r2, #1
     900:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		| PORT_WRCONFIG_PMUXEN
		| PORT_WRCONFIG_WRPINCFG
		| ((1 << 1) & 0xffff);

	// set UART RX input
	PORT->Group[GPIO_PORTB].WRCONFIG.reg =
     904:	f102 42fe 	add.w	r2, r2, #2130706432	; 0x7f000000
     908:	32fe      	adds	r2, #254	; 0xfe
     90a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		| PORT_WRCONFIG_WRPINCFG
		| PORT_WRCONFIG_HWSEL
		| ((1 << 8) & 0xffff);

	// set UART TX output
	PORT->Group[GPIO_PORTB].WRCONFIG.reg =
     90e:	f502 7280 	add.w	r2, r2, #256	; 0x100
     912:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		| PORT_WRCONFIG_WRPINCFG
		| PORT_WRCONFIG_HWSEL
		| ((1 << 9) & 0xffff);
	
	// set CCL2 output on PB09
	PORT->Group[GPIO_PORTB].WRCONFIG.reg =
     916:	f102 420a 	add.w	r2, r2, #2315255808	; 0x8a000000
     91a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		| PORT_WRCONFIG_PMUXEN
		| PORT_WRCONFIG_WRPINCFG
		| PORT_PB09;
	
	// set CCL0 input on PA04
	PORT->Group[GPIO_PORTA].WRCONFIG.reg =
     91e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
     922:	629a      	str	r2, [r3, #40]	; 0x28
		| PORT_WRCONFIG_PMUXEN
		| PORT_WRCONFIG_WRPINCFG
		| PORT_PA04;
	
	// set CCL0 output on PA07
	PORT->Group[GPIO_PORTA].WRCONFIG.reg =
     924:	3270      	adds	r2, #112	; 0x70
     926:	629a      	str	r2, [r3, #40]	; 0x28
		| PORT_WRCONFIG_PMUXEN
		| PORT_WRCONFIG_WRPINCFG
		| PORT_PA07;
	
	// enable AD input on PB04
	PORT->Group[GPIO_PORTB].WRCONFIG.reg =
     928:	f102 4274 	add.w	r2, r2, #4093640704	; 0xf4000000
     92c:	3a70      	subs	r2, #112	; 0x70
     92e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		| PORT_WRCONFIG_WRPINCFG
		| PORT_WRCONFIG_PMUXEN
		| ((1 << 4) & 0xffff);
	
	// enable AD input on PB05
	PORT->Group[GPIO_PORTB].WRCONFIG.reg =
     932:	3210      	adds	r2, #16
     934:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		| PORT_WRCONFIG_WRPINCFG
		| PORT_WRCONFIG_PMUXEN
		| ((1 << 5) & 0xffff);
	
	// enable DAC output on PA02
	PORT->Group[GPIO_PORTA].WRCONFIG.reg =
     938:	3a1c      	subs	r2, #28
     93a:	629a      	str	r2, [r3, #40]	; 0x28
		| PORT_WRCONFIG_WRPINCFG
		| PORT_WRCONFIG_PMUXEN
		| ((1 << 2) & 0xffff);
	
	// configure PA03 as external analog reference
	PORT->Group[GPIO_PORTA].WRCONFIG.reg =
     93c:	3204      	adds	r2, #4
     93e:	629a      	str	r2, [r3, #40]	; 0x28
		| PORT_WRCONFIG_WRPINCFG
		| PORT_WRCONFIG_PMUXEN
		| ((1 << 3) & 0xffff);
		
	// enable Comp input on PA06
	PORT->Group[GPIO_PORTA].WRCONFIG.reg =
     940:	3238      	adds	r2, #56	; 0x38
     942:	629a      	str	r2, [r3, #40]	; 0x28
		  PORT_WRCONFIG_PMUX(MUX_PA06B_AC_AIN2)
		| PORT_WRCONFIG_WRPINCFG
		| PORT_WRCONFIG_WRPMUX
		| PORT_WRCONFIG_PMUXEN
		| ((1 << 6) & 0xffff);
     944:	4770      	bx	lr
     946:	bf00      	nop
     948:	41008000 	.word	0x41008000
     94c:	5c018000 	.word	0x5c018000
     950:	54010001 	.word	0x54010001

00000954 <IRQ_init>:

#include <sam.h>
#include <stdio.h>
#include "irqs.h"

void IRQ_init(void) {
     954:	b570      	push	{r4, r5, r6, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     956:	4d14      	ldr	r5, [pc, #80]	; (9a8 <IRQ_init+0x54>)
     958:	2660      	movs	r6, #96	; 0x60
     95a:	f885 630b 	strb.w	r6, [r5, #779]	; 0x30b
	NVIC_SetPriority(RTC_IRQn, 3);
	printf("IRQ     -- set RTC_IRQ to priority 3.\r\n");
     95e:	4813      	ldr	r0, [pc, #76]	; (9ac <IRQ_init+0x58>)
     960:	4c13      	ldr	r4, [pc, #76]	; (9b0 <IRQ_init+0x5c>)
     962:	47a0      	blx	r4
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     964:	f44f 6300 	mov.w	r3, #2048	; 0x800
     968:	602b      	str	r3, [r5, #0]
	NVIC_EnableIRQ(RTC_IRQn);
	printf("IRQ     -- enable RTC_IRQ.\r\n");
     96a:	4812      	ldr	r0, [pc, #72]	; (9b4 <IRQ_init+0x60>)
     96c:	47a0      	blx	r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     96e:	f885 6378 	strb.w	r6, [r5, #888]	; 0x378
	
	NVIC_SetPriority(ADC1_0_IRQn, 3);
	printf("IRQ     -- set ADC1_0_IRQ to priority 3.\r\n");
     972:	4811      	ldr	r0, [pc, #68]	; (9b8 <IRQ_init+0x64>)
     974:	47a0      	blx	r4
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     976:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
     97a:	60eb      	str	r3, [r5, #12]
	NVIC_EnableIRQ(ADC1_0_IRQn);
	printf("IRQ     -- enable ADC1_0_IRQ.\r\n");
     97c:	480f      	ldr	r0, [pc, #60]	; (9bc <IRQ_init+0x68>)
     97e:	47a0      	blx	r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     980:	f885 6379 	strb.w	r6, [r5, #889]	; 0x379
	
	NVIC_SetPriority(ADC1_1_IRQn, 3);
	printf("IRQ     -- set ADC1_1_IRQ to priority 3.\r\n");
     984:	480e      	ldr	r0, [pc, #56]	; (9c0 <IRQ_init+0x6c>)
     986:	47a0      	blx	r4
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     988:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
     98c:	60eb      	str	r3, [r5, #12]
	NVIC_EnableIRQ(ADC1_1_IRQn);
	printf("IRQ     -- enable ADC1_1_IRQ.\r\n");
     98e:	480d      	ldr	r0, [pc, #52]	; (9c4 <IRQ_init+0x70>)
     990:	47a0      	blx	r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     992:	f885 637a 	strb.w	r6, [r5, #890]	; 0x37a
	
	NVIC_SetPriority(AC_IRQn, 3);
	printf("IRQ     -- set AC_IRQ to priority 3.\r\n");
     996:	480c      	ldr	r0, [pc, #48]	; (9c8 <IRQ_init+0x74>)
     998:	47a0      	blx	r4
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     99a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
     99e:	60eb      	str	r3, [r5, #12]
	NVIC_EnableIRQ(AC_IRQn);
	printf("IRQ     -- enable AC_IRQ.\r\n");
     9a0:	480a      	ldr	r0, [pc, #40]	; (9cc <IRQ_init+0x78>)
     9a2:	47a0      	blx	r4
}
     9a4:	bd70      	pop	{r4, r5, r6, pc}
     9a6:	bf00      	nop
     9a8:	e000e100 	.word	0xe000e100
     9ac:	00001ef0 	.word	0x00001ef0
     9b0:	00000eed 	.word	0x00000eed
     9b4:	00001f18 	.word	0x00001f18
     9b8:	00001f34 	.word	0x00001f34
     9bc:	00001f60 	.word	0x00001f60
     9c0:	00001f80 	.word	0x00001f80
     9c4:	00001fac 	.word	0x00001fac
     9c8:	00001fcc 	.word	0x00001fcc
     9cc:	00001ff4 	.word	0x00001ff4

000009d0 <NVMCTRL_init>:
#include <sam.h>
#include "nvmctrl.h"

void NVMCTRL_init(void) {
	// set 5 wait states for maximum clock of 120 MHz and disable auto wait-states
	NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_RWS(5);
     9d0:	4b02      	ldr	r3, [pc, #8]	; (9dc <NVMCTRL_init+0xc>)
     9d2:	f44f 62a0 	mov.w	r2, #1280	; 0x500
     9d6:	801a      	strh	r2, [r3, #0]
     9d8:	4770      	bx	lr
     9da:	bf00      	nop
     9dc:	41004000 	.word	0x41004000

000009e0 <OSCCTRL_init>:
 * the synchronous bus clock.
 * 
 * init an external crystal oscillator to 12 MHz
 */
void OSCCTRL_init(void) {
	OSCCTRL->XOSCCTRL[1].reg =
     9e0:	4b04      	ldr	r3, [pc, #16]	; (9f4 <OSCCTRL_init+0x14>)
     9e2:	f242 6206 	movw	r2, #9734	; 0x2606
     9e6:	619a      	str	r2, [r3, #24]
		  OSCCTRL_XOSCCTRL_IMULT(4)
		| OSCCTRL_XOSCCTRL_IPTAT(3)
		| (1 << OSCCTRL_XOSCCTRL_XTALEN_Pos)
		| (1 << OSCCTRL_XOSCCTRL_ENABLE_Pos);
	
	while(!(OSCCTRL->INTFLAG.bit.XOSCRDY1));
     9e8:	461a      	mov	r2, r3
     9ea:	68d3      	ldr	r3, [r2, #12]
     9ec:	f013 0f02 	tst.w	r3, #2
     9f0:	d0fb      	beq.n	9ea <OSCCTRL_init+0xa>
     9f2:	4770      	bx	lr
     9f4:	40001000 	.word	0x40001000

000009f8 <PM_init>:
#include "pm.h"

/** 
 * init the PM module to configure the sleep mode.
 */
void PM_init(void) {
     9f8:	b508      	push	{r3, lr}
	PM->SLEEPCFG.reg = PM_SLEEPCFG_SLEEPMODE_STANDBY;
     9fa:	4b07      	ldr	r3, [pc, #28]	; (a18 <PM_init+0x20>)
     9fc:	2204      	movs	r2, #4
     9fe:	705a      	strb	r2, [r3, #1]
	printf("PM      -- configure sleep mode to STANDBY.\r\n");
     a00:	4806      	ldr	r0, [pc, #24]	; (a1c <PM_init+0x24>)
     a02:	4b07      	ldr	r3, [pc, #28]	; (a20 <PM_init+0x28>)
     a04:	4798      	blx	r3
	
	while (!(PM->INTFLAG.reg == PM_INTFLAG_SLEEPRDY));
     a06:	4a04      	ldr	r2, [pc, #16]	; (a18 <PM_init+0x20>)
     a08:	7993      	ldrb	r3, [r2, #6]
     a0a:	b2db      	uxtb	r3, r3
     a0c:	2b01      	cmp	r3, #1
     a0e:	d1fb      	bne.n	a08 <PM_init+0x10>
	printf("PM      -- sleep mode ready.\r\n");	
     a10:	4804      	ldr	r0, [pc, #16]	; (a24 <PM_init+0x2c>)
     a12:	4b03      	ldr	r3, [pc, #12]	; (a20 <PM_init+0x28>)
     a14:	4798      	blx	r3
     a16:	bd08      	pop	{r3, pc}
     a18:	40000400 	.word	0x40000400
     a1c:	00002010 	.word	0x00002010
     a20:	00000eed 	.word	0x00000eed
     a24:	00002040 	.word	0x00002040

00000a28 <PWM_init>:
#include "pwm.h"

/** 
 * init the PWM module to generate two 16-bit PWMs
 */
void PWM_init(void) {
     a28:	b538      	push	{r3, r4, r5, lr}
	MCLK->APBDMASK.bit.TC7_ = 1;
     a2a:	4a20      	ldr	r2, [pc, #128]	; (aac <PWM_init+0x84>)
     a2c:	6a13      	ldr	r3, [r2, #32]
     a2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     a32:	6213      	str	r3, [r2, #32]
	printf("PWM     -- unmask TC7 to enable interface on APBD.\r\n");
     a34:	481e      	ldr	r0, [pc, #120]	; (ab0 <PWM_init+0x88>)
     a36:	4c1f      	ldr	r4, [pc, #124]	; (ab4 <PWM_init+0x8c>)
     a38:	47a0      	blx	r4

	GCLK->PCHCTRL[TC7_GCLK_ID].reg = GCLK_PCHCTRL_GEN_GCLK2 | GCLK_PCHCTRL_CHEN;
     a3a:	4b1f      	ldr	r3, [pc, #124]	; (ab8 <PWM_init+0x90>)
     a3c:	2242      	movs	r2, #66	; 0x42
     a3e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	printf("PWM     -- connect GLCK2 to TC7.\r\n");
     a42:	481e      	ldr	r0, [pc, #120]	; (abc <PWM_init+0x94>)
     a44:	47a0      	blx	r4
	
	// do a software reset of the module (write-synchronized)
	TC7->COUNT16.CTRLA.reg = TC_CTRLA_SWRST;
     a46:	4b1e      	ldr	r3, [pc, #120]	; (ac0 <PWM_init+0x98>)
     a48:	2201      	movs	r2, #1
     a4a:	601a      	str	r2, [r3, #0]
	while (TC7->COUNT16.SYNCBUSY.bit.SWRST);
     a4c:	461a      	mov	r2, r3
     a4e:	6913      	ldr	r3, [r2, #16]
     a50:	f013 0f01 	tst.w	r3, #1
     a54:	d1fb      	bne.n	a4e <PWM_init+0x26>
	printf("PWM     -- issue a software reset.\r\n");
     a56:	481b      	ldr	r0, [pc, #108]	; (ac4 <PWM_init+0x9c>)
     a58:	4d16      	ldr	r5, [pc, #88]	; (ab4 <PWM_init+0x8c>)
     a5a:	47a8      	blx	r5
	
	TC7->COUNT16.CTRLA.reg = TC_CTRLA_MODE(TC_CTRLA_MODE_COUNT16_Val);
     a5c:	4c18      	ldr	r4, [pc, #96]	; (ac0 <PWM_init+0x98>)
     a5e:	2300      	movs	r3, #0
     a60:	6023      	str	r3, [r4, #0]
	TC7->COUNT16.WAVE.reg = TC_WAVE_WAVEGEN_NPWM_Val;
     a62:	2302      	movs	r3, #2
     a64:	7323      	strb	r3, [r4, #12]
	printf("PWM     -- set mode to normal PWM in 16-bit counter mode.\r\n");
     a66:	4818      	ldr	r0, [pc, #96]	; (ac8 <PWM_init+0xa0>)
     a68:	47a8      	blx	r5
	
	TC7->COUNT16.CC[0].reg = 32767;
     a6a:	f647 73ff 	movw	r3, #32767	; 0x7fff
     a6e:	83a3      	strh	r3, [r4, #28]
	while (TC7->COUNT16.SYNCBUSY.bit.CC0);
     a70:	4622      	mov	r2, r4
     a72:	6913      	ldr	r3, [r2, #16]
     a74:	f013 0f40 	tst.w	r3, #64	; 0x40
     a78:	d1fb      	bne.n	a72 <PWM_init+0x4a>
	TC7->COUNT16.CC[1].reg = 10000;
     a7a:	4b11      	ldr	r3, [pc, #68]	; (ac0 <PWM_init+0x98>)
     a7c:	f242 7210 	movw	r2, #10000	; 0x2710
     a80:	83da      	strh	r2, [r3, #30]
	while (TC7->COUNT16.SYNCBUSY.bit.CC1);
     a82:	461a      	mov	r2, r3
     a84:	6913      	ldr	r3, [r2, #16]
     a86:	f013 0f80 	tst.w	r3, #128	; 0x80
     a8a:	d1fb      	bne.n	a84 <PWM_init+0x5c>
	printf("PWM     -- set initial duty cycles for CC0 and CC1.\r\n");
     a8c:	480f      	ldr	r0, [pc, #60]	; (acc <PWM_init+0xa4>)
     a8e:	4b09      	ldr	r3, [pc, #36]	; (ab4 <PWM_init+0x8c>)
     a90:	4798      	blx	r3
	
	TC7->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
     a92:	4a0b      	ldr	r2, [pc, #44]	; (ac0 <PWM_init+0x98>)
     a94:	6813      	ldr	r3, [r2, #0]
     a96:	f043 0302 	orr.w	r3, r3, #2
     a9a:	6013      	str	r3, [r2, #0]
	while (TC7->COUNT16.SYNCBUSY.bit.ENABLE);
     a9c:	6913      	ldr	r3, [r2, #16]
     a9e:	f013 0f02 	tst.w	r3, #2
     aa2:	d1fb      	bne.n	a9c <PWM_init+0x74>
	printf("PWM     -- enable TC7 module.\r\n");
     aa4:	480a      	ldr	r0, [pc, #40]	; (ad0 <PWM_init+0xa8>)
     aa6:	4b03      	ldr	r3, [pc, #12]	; (ab4 <PWM_init+0x8c>)
     aa8:	4798      	blx	r3
     aaa:	bd38      	pop	{r3, r4, r5, pc}
     aac:	40000800 	.word	0x40000800
     ab0:	00002060 	.word	0x00002060
     ab4:	00000eed 	.word	0x00000eed
     ab8:	40001c00 	.word	0x40001c00
     abc:	00002094 	.word	0x00002094
     ac0:	43001800 	.word	0x43001800
     ac4:	000020b8 	.word	0x000020b8
     ac8:	000020dc 	.word	0x000020dc
     acc:	00002118 	.word	0x00002118
     ad0:	00002150 	.word	0x00002150

00000ad4 <RTC_init>:
#include "rtc.h"

/** 
 * init the RTC module to generate an interrupt every 1s.
 */
void RTC_init(void) {
     ad4:	b538      	push	{r3, r4, r5, lr}

	OSC32KCTRL->RTCCTRL.reg = OSC32KCTRL_RTCCTRL_RTCSEL_ULP32K;
     ad6:	2401      	movs	r4, #1
     ad8:	4b1e      	ldr	r3, [pc, #120]	; (b54 <RTC_init+0x80>)
     ada:	741c      	strb	r4, [r3, #16]
	printf("OSC32K  -- select internal 32kHz oscillator as source.\r\n");
     adc:	481e      	ldr	r0, [pc, #120]	; (b58 <RTC_init+0x84>)
     ade:	4b1f      	ldr	r3, [pc, #124]	; (b5c <RTC_init+0x88>)
     ae0:	4798      	blx	r3
	
	RTC->MODE0.CTRLA.reg = RTC_MODE0_CTRLA_SWRST;
     ae2:	4b1f      	ldr	r3, [pc, #124]	; (b60 <RTC_init+0x8c>)
     ae4:	801c      	strh	r4, [r3, #0]
	while(RTC->MODE0.SYNCBUSY.bit.SWRST);
     ae6:	461a      	mov	r2, r3
     ae8:	6913      	ldr	r3, [r2, #16]
     aea:	f013 0f01 	tst.w	r3, #1
     aee:	d1fb      	bne.n	ae8 <RTC_init+0x14>
	while(RTC->MODE0.CTRLA.bit.SWRST);
     af0:	4a1b      	ldr	r2, [pc, #108]	; (b60 <RTC_init+0x8c>)
     af2:	8813      	ldrh	r3, [r2, #0]
     af4:	f013 0f01 	tst.w	r3, #1
     af8:	d1fb      	bne.n	af2 <RTC_init+0x1e>
	printf("RTC     -- software reset.\r\n");
     afa:	481a      	ldr	r0, [pc, #104]	; (b64 <RTC_init+0x90>)
     afc:	4b17      	ldr	r3, [pc, #92]	; (b5c <RTC_init+0x88>)
     afe:	4798      	blx	r3
	
	RTC->MODE0.CTRLA.reg = 
     b00:	4b17      	ldr	r3, [pc, #92]	; (b60 <RTC_init+0x8c>)
     b02:	f248 1280 	movw	r2, #33152	; 0x8180
     b06:	801a      	strh	r2, [r3, #0]
		  RTC_MODE0_CTRLA_COUNTSYNC
		| RTC_MODE0_CTRLA_PRESCALER_DIV1
		| RTC_MODE0_CTRLA_MATCHCLR;
	while(RTC->MODE0.SYNCBUSY.bit.COUNTSYNC);
     b08:	461a      	mov	r2, r3
     b0a:	6913      	ldr	r3, [r2, #16]
     b0c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
     b10:	d1fb      	bne.n	b0a <RTC_init+0x36>
	printf("RTC     -- enable read synchronization for count register.\r\n");
     b12:	4815      	ldr	r0, [pc, #84]	; (b68 <RTC_init+0x94>)
     b14:	4d11      	ldr	r5, [pc, #68]	; (b5c <RTC_init+0x88>)
     b16:	47a8      	blx	r5
	printf("RTC     -- set divider to 1.\r\n");
     b18:	4814      	ldr	r0, [pc, #80]	; (b6c <RTC_init+0x98>)
     b1a:	47a8      	blx	r5
	printf("RTC     -- enable clear on match.\r\n");
     b1c:	4814      	ldr	r0, [pc, #80]	; (b70 <RTC_init+0x9c>)
     b1e:	47a8      	blx	r5
	
	RTC->MODE0.EVCTRL.bit.CMPEO0 = 1;
     b20:	4c0f      	ldr	r4, [pc, #60]	; (b60 <RTC_init+0x8c>)
     b22:	6863      	ldr	r3, [r4, #4]
     b24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     b28:	6063      	str	r3, [r4, #4]
	printf("RTC     -- enable event CMP0, will generate event on match.\r\n");
     b2a:	4812      	ldr	r0, [pc, #72]	; (b74 <RTC_init+0xa0>)
     b2c:	47a8      	blx	r5
	
	RTC->MODE0.COMP[0].reg = 32768;
     b2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     b32:	6223      	str	r3, [r4, #32]
	printf("RTC     -- set compare value to 32768.\r\n");
     b34:	4810      	ldr	r0, [pc, #64]	; (b78 <RTC_init+0xa4>)
     b36:	47a8      	blx	r5
		
	RTC->MODE0.CTRLA.bit.ENABLE = 1;
     b38:	8823      	ldrh	r3, [r4, #0]
     b3a:	f043 0302 	orr.w	r3, r3, #2
     b3e:	8023      	strh	r3, [r4, #0]
	while(RTC->MODE0.SYNCBUSY.bit.ENABLE);
     b40:	4622      	mov	r2, r4
     b42:	6913      	ldr	r3, [r2, #16]
     b44:	f013 0f02 	tst.w	r3, #2
     b48:	d1fb      	bne.n	b42 <RTC_init+0x6e>
	printf("RTC     -- enable RTC.\r\n");
     b4a:	480c      	ldr	r0, [pc, #48]	; (b7c <RTC_init+0xa8>)
     b4c:	4b03      	ldr	r3, [pc, #12]	; (b5c <RTC_init+0x88>)
     b4e:	4798      	blx	r3
     b50:	bd38      	pop	{r3, r4, r5, pc}
     b52:	bf00      	nop
     b54:	40001400 	.word	0x40001400
     b58:	00002170 	.word	0x00002170
     b5c:	00000eed 	.word	0x00000eed
     b60:	40002400 	.word	0x40002400
     b64:	000021a8 	.word	0x000021a8
     b68:	000021c4 	.word	0x000021c4
     b6c:	00002200 	.word	0x00002200
     b70:	00002220 	.word	0x00002220
     b74:	00002244 	.word	0x00002244
     b78:	00002284 	.word	0x00002284
     b7c:	000022ac 	.word	0x000022ac

00000b80 <SERCOM2_init>:
 * init the SERCOM2 module to 115200 baud, 8N1
 */
void SERCOM2_init(void) {

	// unmask SERCOM2 in MCLK to enable clock to user interface
	MCLK->APBBMASK.bit.SERCOM2_ = 1;
     b80:	4a16      	ldr	r2, [pc, #88]	; (bdc <SERCOM2_init+0x5c>)
     b82:	6993      	ldr	r3, [r2, #24]
     b84:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     b88:	6193      	str	r3, [r2, #24]
	
	// connect GLCK3 with SERCOM2 module (core and slow clock)
	GCLK->PCHCTRL[SERCOM2_GCLK_ID_CORE].reg = GCLK_PCHCTRL_GEN_GCLK3 | GCLK_PCHCTRL_CHEN;
     b8a:	4b15      	ldr	r3, [pc, #84]	; (be0 <SERCOM2_init+0x60>)
     b8c:	2243      	movs	r2, #67	; 0x43
     b8e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	GCLK->PCHCTRL[SERCOM2_GCLK_ID_SLOW].reg = GCLK_PCHCTRL_GEN_GCLK4 | GCLK_PCHCTRL_CHEN;
     b92:	2244      	movs	r2, #68	; 0x44
     b94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	
	// do a software reset of the module (write-synchronized)
	SERCOM2->USART.CTRLA.reg = SERCOM_USART_CTRLA_SWRST;
     b98:	4b12      	ldr	r3, [pc, #72]	; (be4 <SERCOM2_init+0x64>)
     b9a:	2201      	movs	r2, #1
     b9c:	601a      	str	r2, [r3, #0]
	while (SERCOM2->USART.SYNCBUSY.bit.SWRST);
     b9e:	461a      	mov	r2, r3
     ba0:	69d3      	ldr	r3, [r2, #28]
     ba2:	f013 0f01 	tst.w	r3, #1
     ba6:	d1fb      	bne.n	ba0 <SERCOM2_init+0x20>

	// configure UART mode and bit order
	SERCOM2->USART.CTRLA.reg = 
     ba8:	4b0e      	ldr	r3, [pc, #56]	; (be4 <SERCOM2_init+0x64>)
     baa:	4a0f      	ldr	r2, [pc, #60]	; (be8 <SERCOM2_init+0x68>)
     bac:	601a      	str	r2, [r3, #0]
		  SERCOM_USART_CTRLA_MODE(1)
		| SERCOM_USART_CTRLA_RXPO(1)
		| SERCOM_USART_CTRLA_DORD;

	// enable transmitter and receiver
	SERCOM2->USART.CTRLB.reg = 
     bae:	f44f 3240 	mov.w	r2, #196608	; 0x30000
     bb2:	605a      	str	r2, [r3, #4]
		  SERCOM_USART_CTRLB_TXEN
		| SERCOM_USART_CTRLB_RXEN;
	while(SERCOM2->USART.SYNCBUSY.bit.CTRLB);
     bb4:	461a      	mov	r2, r3
     bb6:	69d3      	ldr	r3, [r2, #28]
     bb8:	f013 0f04 	tst.w	r3, #4
     bbc:	d1fb      	bne.n	bb6 <SERCOM2_init+0x36>

	// setup baud rate
	SERCOM2->USART.BAUD.reg = CONF_SERCOM_2_USART_BAUD_RATE_REGISTER_VAL;
     bbe:	4b09      	ldr	r3, [pc, #36]	; (be4 <SERCOM2_init+0x64>)
     bc0:	f64d 02ad 	movw	r2, #55469	; 0xd8ad
     bc4:	819a      	strh	r2, [r3, #12]

	// enable UART
	SERCOM2->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     bc6:	681a      	ldr	r2, [r3, #0]
     bc8:	f042 0202 	orr.w	r2, r2, #2
     bcc:	601a      	str	r2, [r3, #0]
	while(SERCOM2->USART.SYNCBUSY.bit.ENABLE);
     bce:	461a      	mov	r2, r3
     bd0:	69d3      	ldr	r3, [r2, #28]
     bd2:	f013 0f02 	tst.w	r3, #2
     bd6:	d1fb      	bne.n	bd0 <SERCOM2_init+0x50>

}
     bd8:	4770      	bx	lr
     bda:	bf00      	nop
     bdc:	40000800 	.word	0x40000800
     be0:	40001c00 	.word	0x40001c00
     be4:	41012000 	.word	0x41012000
     be8:	40100004 	.word	0x40100004

00000bec <SERCOM2_write>:

int32_t SERCOM2_write(const char *const buf, const uint32_t length) {
     bec:	b410      	push	{r4}
	uint32_t offset = 0;
	
	while(!(SERCOM2->USART.INTFLAG.bit.DRE));
     bee:	4a0d      	ldr	r2, [pc, #52]	; (c24 <SERCOM2_write+0x38>)
     bf0:	7e13      	ldrb	r3, [r2, #24]
     bf2:	f013 0f01 	tst.w	r3, #1
     bf6:	d0fb      	beq.n	bf0 <SERCOM2_write+0x4>
     bf8:	1e44      	subs	r4, r0, #1
	uint32_t offset = 0;
     bfa:	2000      	movs	r0, #0
	
	do {
		SERCOM2->USART.DATA.reg = buf[offset];
     bfc:	4a09      	ldr	r2, [pc, #36]	; (c24 <SERCOM2_write+0x38>)
     bfe:	f814 3f01 	ldrb.w	r3, [r4, #1]!
     c02:	6293      	str	r3, [r2, #40]	; 0x28
		while(!(SERCOM2->USART.INTFLAG.bit.DRE));
     c04:	7e13      	ldrb	r3, [r2, #24]
     c06:	f013 0f01 	tst.w	r3, #1
     c0a:	d0fb      	beq.n	c04 <SERCOM2_write+0x18>
	} while (++offset < length);
     c0c:	3001      	adds	r0, #1
     c0e:	4288      	cmp	r0, r1
     c10:	d3f5      	bcc.n	bfe <SERCOM2_write+0x12>
	
	while(!(SERCOM2->USART.INTFLAG.bit.TXC));
     c12:	4a04      	ldr	r2, [pc, #16]	; (c24 <SERCOM2_write+0x38>)
     c14:	7e13      	ldrb	r3, [r2, #24]
     c16:	f013 0f02 	tst.w	r3, #2
     c1a:	d0fb      	beq.n	c14 <SERCOM2_write+0x28>
	
	return (int32_t)offset;
}
     c1c:	f85d 4b04 	ldr.w	r4, [sp], #4
     c20:	4770      	bx	lr
     c22:	bf00      	nop
     c24:	41012000 	.word	0x41012000

00000c28 <SERCOM2_read>:

int32_t SERCOM2_read(char *const buf, const uint32_t length) {
     c28:	b410      	push	{r4}
	uint32_t offset = 0;
     c2a:	1e44      	subs	r4, r0, #1
     c2c:	2000      	movs	r0, #0
	
	do {
		while(!(SERCOM2->USART.INTFLAG.bit.RXC));
     c2e:	4a07      	ldr	r2, [pc, #28]	; (c4c <SERCOM2_read+0x24>)
     c30:	7e13      	ldrb	r3, [r2, #24]
     c32:	f013 0f04 	tst.w	r3, #4
     c36:	d0fb      	beq.n	c30 <SERCOM2_read+0x8>
		buf[offset] = SERCOM2->USART.DATA.reg;
     c38:	6a93      	ldr	r3, [r2, #40]	; 0x28
     c3a:	f804 3f01 	strb.w	r3, [r4, #1]!
	} while (++offset < length);
     c3e:	3001      	adds	r0, #1
     c40:	4288      	cmp	r0, r1
     c42:	d3f5      	bcc.n	c30 <SERCOM2_read+0x8>

	return (int32_t)offset;
}
     c44:	f85d 4b04 	ldr.w	r4, [sp], #4
     c48:	4770      	bx	lr
     c4a:	bf00      	nop
     c4c:	41012000 	.word	0x41012000

00000c50 <SUPC_init>:
#include "supc.h"

/** 
 * init the SUPC module to activate the buck regulator.
 */
void SUPC_init(void) {
     c50:	b508      	push	{r3, lr}
	// don't clear the enable bit, otherwise you'll have trouble to program the device again
	SUPC->VREG.reg =
     c52:	4b06      	ldr	r3, [pc, #24]	; (c6c <SUPC_init+0x1c>)
     c54:	2202      	movs	r2, #2
     c56:	619a      	str	r2, [r3, #24]
		  SUPC_VREG_SEL_LDO
		| SUPC_VREG_ENABLE;
		
	while(!(SUPC->STATUS.bit.VREGRDY));
     c58:	461a      	mov	r2, r3
     c5a:	68d3      	ldr	r3, [r2, #12]
     c5c:	f413 7f80 	tst.w	r3, #256	; 0x100
     c60:	d0fb      	beq.n	c5a <SUPC_init+0xa>
	printf("SUPC    -- activated LDO regulator for VDDCORE.\r\n");
     c62:	4803      	ldr	r0, [pc, #12]	; (c70 <SUPC_init+0x20>)
     c64:	4b03      	ldr	r3, [pc, #12]	; (c74 <SUPC_init+0x24>)
     c66:	4798      	blx	r3
     c68:	bd08      	pop	{r3, pc}
     c6a:	bf00      	nop
     c6c:	40001800 	.word	0x40001800
     c70:	000022c4 	.word	0x000022c4
     c74:	00000eed 	.word	0x00000eed

00000c78 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
        }
     c78:	e7fe      	b.n	c78 <Dummy_Handler>
	...

00000c7c <Reset_Handler>:
{
     c7c:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     c7e:	4a1c      	ldr	r2, [pc, #112]	; (cf0 <Reset_Handler+0x74>)
     c80:	4b1c      	ldr	r3, [pc, #112]	; (cf4 <Reset_Handler+0x78>)
     c82:	429a      	cmp	r2, r3
     c84:	d011      	beq.n	caa <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     c86:	461a      	mov	r2, r3
     c88:	4b1b      	ldr	r3, [pc, #108]	; (cf8 <Reset_Handler+0x7c>)
     c8a:	429a      	cmp	r2, r3
     c8c:	d20d      	bcs.n	caa <Reset_Handler+0x2e>
     c8e:	4611      	mov	r1, r2
     c90:	3b01      	subs	r3, #1
     c92:	1a9b      	subs	r3, r3, r2
     c94:	f023 0303 	bic.w	r3, r3, #3
     c98:	3304      	adds	r3, #4
     c9a:	4a15      	ldr	r2, [pc, #84]	; (cf0 <Reset_Handler+0x74>)
     c9c:	4413      	add	r3, r2
                        *pDest++ = *pSrc++;
     c9e:	f852 0b04 	ldr.w	r0, [r2], #4
     ca2:	f841 0b04 	str.w	r0, [r1], #4
                for (; pDest < &_erelocate;) {
     ca6:	429a      	cmp	r2, r3
     ca8:	d1f9      	bne.n	c9e <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
     caa:	4a14      	ldr	r2, [pc, #80]	; (cfc <Reset_Handler+0x80>)
     cac:	4b14      	ldr	r3, [pc, #80]	; (d00 <Reset_Handler+0x84>)
     cae:	429a      	cmp	r2, r3
     cb0:	d20a      	bcs.n	cc8 <Reset_Handler+0x4c>
     cb2:	3b01      	subs	r3, #1
     cb4:	1a9b      	subs	r3, r3, r2
     cb6:	f023 0303 	bic.w	r3, r3, #3
     cba:	3304      	adds	r3, #4
     cbc:	4413      	add	r3, r2
                *pDest++ = 0;
     cbe:	2100      	movs	r1, #0
     cc0:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     cc4:	4293      	cmp	r3, r2
     cc6:	d1fb      	bne.n	cc0 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     cc8:	4b0e      	ldr	r3, [pc, #56]	; (d04 <Reset_Handler+0x88>)
     cca:	4a0f      	ldr	r2, [pc, #60]	; (d08 <Reset_Handler+0x8c>)
     ccc:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     cd0:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     cd2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     cd6:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     cda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
     cde:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     ce2:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     ce6:	4b09      	ldr	r3, [pc, #36]	; (d0c <Reset_Handler+0x90>)
     ce8:	4798      	blx	r3
        main();
     cea:	4b09      	ldr	r3, [pc, #36]	; (d10 <Reset_Handler+0x94>)
     cec:	4798      	blx	r3
        while (1);
     cee:	e7fe      	b.n	cee <Reset_Handler+0x72>
     cf0:	0000237c 	.word	0x0000237c
     cf4:	20000000 	.word	0x20000000
     cf8:	20000064 	.word	0x20000064
     cfc:	20000064 	.word	0x20000064
     d00:	2000009c 	.word	0x2000009c
     d04:	e000ed00 	.word	0xe000ed00
     d08:	00000000 	.word	0x00000000
     d0c:	00000db9 	.word	0x00000db9
     d10:	000002f1 	.word	0x000002f1

00000d14 <delay_ms>:
	);*/
}

void delay_ms(const uint16_t ms) {
	_delay_cycles(_get_cycles_for_ms(ms));
}
     d14:	4770      	bx	lr

00000d16 <delay_cycles>:

void delay_cycles(const uint32_t cycles) {
	_delay_cycles(cycles);
     d16:	4770      	bx	lr

00000d18 <print_init>:
extern int _end;

/**
 * redirect the stdio output for printf
 */
void print_init(void) {
     d18:	b538      	push	{r3, r4, r5, lr}
	/* set STDIO to unbuffered */
	setbuf(stdout, NULL);
     d1a:	4d05      	ldr	r5, [pc, #20]	; (d30 <print_init+0x18>)
     d1c:	682b      	ldr	r3, [r5, #0]
     d1e:	2100      	movs	r1, #0
     d20:	6898      	ldr	r0, [r3, #8]
     d22:	4c04      	ldr	r4, [pc, #16]	; (d34 <print_init+0x1c>)
     d24:	47a0      	blx	r4
	setbuf(stdin, NULL);
     d26:	682b      	ldr	r3, [r5, #0]
     d28:	2100      	movs	r1, #0
     d2a:	6858      	ldr	r0, [r3, #4]
     d2c:	47a0      	blx	r4
}
     d2e:	bd38      	pop	{r3, r4, r5, pc}
     d30:	20000000 	.word	0x20000000
     d34:	00000efd 	.word	0x00000efd

00000d38 <_read>:

int _read(int file, char *ptr, int len) {
	int n = 0;

	if (file != 0) {
     d38:	b940      	cbnz	r0, d4c <_read+0x14>
int _read(int file, char *ptr, int len) {
     d3a:	b508      	push	{r3, lr}
     d3c:	460b      	mov	r3, r1
     d3e:	4611      	mov	r1, r2
     d40:	4618      	mov	r0, r3
		return -1;
	}

	n = SERCOM2_read((char *)ptr, len);
     d42:	4b04      	ldr	r3, [pc, #16]	; (d54 <_read+0x1c>)
     d44:	4798      	blx	r3
	if (n < 0) {
     d46:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
		return -1;
	}

	return n;
}
     d4a:	bd08      	pop	{r3, pc}
		return -1;
     d4c:	f04f 30ff 	mov.w	r0, #4294967295
}
     d50:	4770      	bx	lr
     d52:	bf00      	nop
     d54:	00000c29 	.word	0x00000c29

00000d58 <_write>:

int _write(int file, char *ptr, int len) {
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
     d58:	3801      	subs	r0, #1
     d5a:	2802      	cmp	r0, #2
     d5c:	d808      	bhi.n	d70 <_write+0x18>
int _write(int file, char *ptr, int len) {
     d5e:	b508      	push	{r3, lr}
     d60:	460b      	mov	r3, r1
     d62:	4611      	mov	r1, r2
     d64:	4618      	mov	r0, r3
		return -1;
	}

	n = SERCOM2_write((const char *)ptr, len);
     d66:	4b04      	ldr	r3, [pc, #16]	; (d78 <_write+0x20>)
     d68:	4798      	blx	r3
	if (n < 0) {
     d6a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
		return -1;
	}

	return n;
}
     d6e:	bd08      	pop	{r3, pc}
		return -1;
     d70:	f04f 30ff 	mov.w	r0, #4294967295
}
     d74:	4770      	bx	lr
     d76:	bf00      	nop
     d78:	00000bed 	.word	0x00000bed

00000d7c <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
caddr_t _sbrk(int incr)
{
     d7c:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     d7e:	4a06      	ldr	r2, [pc, #24]	; (d98 <_sbrk+0x1c>)
     d80:	6812      	ldr	r2, [r2, #0]
     d82:	b122      	cbz	r2, d8e <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     d84:	4a04      	ldr	r2, [pc, #16]	; (d98 <_sbrk+0x1c>)
     d86:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     d88:	4403      	add	r3, r0
     d8a:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     d8c:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     d8e:	4a02      	ldr	r2, [pc, #8]	; (d98 <_sbrk+0x1c>)
     d90:	4902      	ldr	r1, [pc, #8]	; (d9c <_sbrk+0x20>)
     d92:	6011      	str	r1, [r2, #0]
     d94:	e7f6      	b.n	d84 <_sbrk+0x8>
     d96:	bf00      	nop
     d98:	20000080 	.word	0x20000080
     d9c:	200100a0 	.word	0x200100a0

00000da0 <_close>:
 */
int _close(int file)
{
	(void)file;
	return -1;
}
     da0:	f04f 30ff 	mov.w	r0, #4294967295
     da4:	4770      	bx	lr

00000da6 <_fstat>:
 * \brief Replacement of C library of _fstat
 */
int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
     da6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     daa:	604b      	str	r3, [r1, #4]

	return 0;
}
     dac:	2000      	movs	r0, #0
     dae:	4770      	bx	lr

00000db0 <_isatty>:
 */
int _isatty(int file)
{
	(void)file;
	return 1;
}
     db0:	2001      	movs	r0, #1
     db2:	4770      	bx	lr

00000db4 <_lseek>:
 */
int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
     db4:	2000      	movs	r0, #0
     db6:	4770      	bx	lr

00000db8 <__libc_init_array>:
     db8:	b570      	push	{r4, r5, r6, lr}
     dba:	4d0d      	ldr	r5, [pc, #52]	; (df0 <__libc_init_array+0x38>)
     dbc:	4c0d      	ldr	r4, [pc, #52]	; (df4 <__libc_init_array+0x3c>)
     dbe:	1b64      	subs	r4, r4, r5
     dc0:	10a4      	asrs	r4, r4, #2
     dc2:	2600      	movs	r6, #0
     dc4:	42a6      	cmp	r6, r4
     dc6:	d109      	bne.n	ddc <__libc_init_array+0x24>
     dc8:	4d0b      	ldr	r5, [pc, #44]	; (df8 <__libc_init_array+0x40>)
     dca:	4c0c      	ldr	r4, [pc, #48]	; (dfc <__libc_init_array+0x44>)
     dcc:	f001 fac6 	bl	235c <_init>
     dd0:	1b64      	subs	r4, r4, r5
     dd2:	10a4      	asrs	r4, r4, #2
     dd4:	2600      	movs	r6, #0
     dd6:	42a6      	cmp	r6, r4
     dd8:	d105      	bne.n	de6 <__libc_init_array+0x2e>
     dda:	bd70      	pop	{r4, r5, r6, pc}
     ddc:	f855 3b04 	ldr.w	r3, [r5], #4
     de0:	4798      	blx	r3
     de2:	3601      	adds	r6, #1
     de4:	e7ee      	b.n	dc4 <__libc_init_array+0xc>
     de6:	f855 3b04 	ldr.w	r3, [r5], #4
     dea:	4798      	blx	r3
     dec:	3601      	adds	r6, #1
     dee:	e7f2      	b.n	dd6 <__libc_init_array+0x1e>
     df0:	00002368 	.word	0x00002368
     df4:	00002368 	.word	0x00002368
     df8:	00002368 	.word	0x00002368
     dfc:	0000236c 	.word	0x0000236c

00000e00 <memset>:
     e00:	4402      	add	r2, r0
     e02:	4603      	mov	r3, r0
     e04:	4293      	cmp	r3, r2
     e06:	d100      	bne.n	e0a <memset+0xa>
     e08:	4770      	bx	lr
     e0a:	f803 1b01 	strb.w	r1, [r3], #1
     e0e:	e7f9      	b.n	e04 <memset+0x4>

00000e10 <_puts_r>:
     e10:	b570      	push	{r4, r5, r6, lr}
     e12:	460e      	mov	r6, r1
     e14:	4605      	mov	r5, r0
     e16:	b118      	cbz	r0, e20 <_puts_r+0x10>
     e18:	6983      	ldr	r3, [r0, #24]
     e1a:	b90b      	cbnz	r3, e20 <_puts_r+0x10>
     e1c:	f000 fb12 	bl	1444 <__sinit>
     e20:	69ab      	ldr	r3, [r5, #24]
     e22:	68ac      	ldr	r4, [r5, #8]
     e24:	b913      	cbnz	r3, e2c <_puts_r+0x1c>
     e26:	4628      	mov	r0, r5
     e28:	f000 fb0c 	bl	1444 <__sinit>
     e2c:	4b2c      	ldr	r3, [pc, #176]	; (ee0 <_puts_r+0xd0>)
     e2e:	429c      	cmp	r4, r3
     e30:	d120      	bne.n	e74 <_puts_r+0x64>
     e32:	686c      	ldr	r4, [r5, #4]
     e34:	6e63      	ldr	r3, [r4, #100]	; 0x64
     e36:	07db      	lsls	r3, r3, #31
     e38:	d405      	bmi.n	e46 <_puts_r+0x36>
     e3a:	89a3      	ldrh	r3, [r4, #12]
     e3c:	0598      	lsls	r0, r3, #22
     e3e:	d402      	bmi.n	e46 <_puts_r+0x36>
     e40:	6da0      	ldr	r0, [r4, #88]	; 0x58
     e42:	f000 fb9c 	bl	157e <__retarget_lock_acquire_recursive>
     e46:	89a3      	ldrh	r3, [r4, #12]
     e48:	0719      	lsls	r1, r3, #28
     e4a:	d51d      	bpl.n	e88 <_puts_r+0x78>
     e4c:	6923      	ldr	r3, [r4, #16]
     e4e:	b1db      	cbz	r3, e88 <_puts_r+0x78>
     e50:	3e01      	subs	r6, #1
     e52:	68a3      	ldr	r3, [r4, #8]
     e54:	f816 1f01 	ldrb.w	r1, [r6, #1]!
     e58:	3b01      	subs	r3, #1
     e5a:	60a3      	str	r3, [r4, #8]
     e5c:	bb39      	cbnz	r1, eae <_puts_r+0x9e>
     e5e:	2b00      	cmp	r3, #0
     e60:	da38      	bge.n	ed4 <_puts_r+0xc4>
     e62:	4622      	mov	r2, r4
     e64:	210a      	movs	r1, #10
     e66:	4628      	mov	r0, r5
     e68:	f000 f912 	bl	1090 <__swbuf_r>
     e6c:	3001      	adds	r0, #1
     e6e:	d011      	beq.n	e94 <_puts_r+0x84>
     e70:	250a      	movs	r5, #10
     e72:	e011      	b.n	e98 <_puts_r+0x88>
     e74:	4b1b      	ldr	r3, [pc, #108]	; (ee4 <_puts_r+0xd4>)
     e76:	429c      	cmp	r4, r3
     e78:	d101      	bne.n	e7e <_puts_r+0x6e>
     e7a:	68ac      	ldr	r4, [r5, #8]
     e7c:	e7da      	b.n	e34 <_puts_r+0x24>
     e7e:	4b1a      	ldr	r3, [pc, #104]	; (ee8 <_puts_r+0xd8>)
     e80:	429c      	cmp	r4, r3
     e82:	bf08      	it	eq
     e84:	68ec      	ldreq	r4, [r5, #12]
     e86:	e7d5      	b.n	e34 <_puts_r+0x24>
     e88:	4621      	mov	r1, r4
     e8a:	4628      	mov	r0, r5
     e8c:	f000 f952 	bl	1134 <__swsetup_r>
     e90:	2800      	cmp	r0, #0
     e92:	d0dd      	beq.n	e50 <_puts_r+0x40>
     e94:	f04f 35ff 	mov.w	r5, #4294967295
     e98:	6e63      	ldr	r3, [r4, #100]	; 0x64
     e9a:	07da      	lsls	r2, r3, #31
     e9c:	d405      	bmi.n	eaa <_puts_r+0x9a>
     e9e:	89a3      	ldrh	r3, [r4, #12]
     ea0:	059b      	lsls	r3, r3, #22
     ea2:	d402      	bmi.n	eaa <_puts_r+0x9a>
     ea4:	6da0      	ldr	r0, [r4, #88]	; 0x58
     ea6:	f000 fb6b 	bl	1580 <__retarget_lock_release_recursive>
     eaa:	4628      	mov	r0, r5
     eac:	bd70      	pop	{r4, r5, r6, pc}
     eae:	2b00      	cmp	r3, #0
     eb0:	da04      	bge.n	ebc <_puts_r+0xac>
     eb2:	69a2      	ldr	r2, [r4, #24]
     eb4:	429a      	cmp	r2, r3
     eb6:	dc06      	bgt.n	ec6 <_puts_r+0xb6>
     eb8:	290a      	cmp	r1, #10
     eba:	d004      	beq.n	ec6 <_puts_r+0xb6>
     ebc:	6823      	ldr	r3, [r4, #0]
     ebe:	1c5a      	adds	r2, r3, #1
     ec0:	6022      	str	r2, [r4, #0]
     ec2:	7019      	strb	r1, [r3, #0]
     ec4:	e7c5      	b.n	e52 <_puts_r+0x42>
     ec6:	4622      	mov	r2, r4
     ec8:	4628      	mov	r0, r5
     eca:	f000 f8e1 	bl	1090 <__swbuf_r>
     ece:	3001      	adds	r0, #1
     ed0:	d1bf      	bne.n	e52 <_puts_r+0x42>
     ed2:	e7df      	b.n	e94 <_puts_r+0x84>
     ed4:	6823      	ldr	r3, [r4, #0]
     ed6:	250a      	movs	r5, #10
     ed8:	1c5a      	adds	r2, r3, #1
     eda:	6022      	str	r2, [r4, #0]
     edc:	701d      	strb	r5, [r3, #0]
     ede:	e7db      	b.n	e98 <_puts_r+0x88>
     ee0:	0000231c 	.word	0x0000231c
     ee4:	0000233c 	.word	0x0000233c
     ee8:	000022fc 	.word	0x000022fc

00000eec <puts>:
     eec:	4b02      	ldr	r3, [pc, #8]	; (ef8 <puts+0xc>)
     eee:	4601      	mov	r1, r0
     ef0:	6818      	ldr	r0, [r3, #0]
     ef2:	f7ff bf8d 	b.w	e10 <_puts_r>
     ef6:	bf00      	nop
     ef8:	20000000 	.word	0x20000000

00000efc <setbuf>:
     efc:	2900      	cmp	r1, #0
     efe:	f44f 6380 	mov.w	r3, #1024	; 0x400
     f02:	bf0c      	ite	eq
     f04:	2202      	moveq	r2, #2
     f06:	2200      	movne	r2, #0
     f08:	f000 b800 	b.w	f0c <setvbuf>

00000f0c <setvbuf>:
     f0c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
     f10:	461e      	mov	r6, r3
     f12:	4b5b      	ldr	r3, [pc, #364]	; (1080 <setvbuf+0x174>)
     f14:	681d      	ldr	r5, [r3, #0]
     f16:	4604      	mov	r4, r0
     f18:	460f      	mov	r7, r1
     f1a:	4690      	mov	r8, r2
     f1c:	b125      	cbz	r5, f28 <setvbuf+0x1c>
     f1e:	69ab      	ldr	r3, [r5, #24]
     f20:	b913      	cbnz	r3, f28 <setvbuf+0x1c>
     f22:	4628      	mov	r0, r5
     f24:	f000 fa8e 	bl	1444 <__sinit>
     f28:	4b56      	ldr	r3, [pc, #344]	; (1084 <setvbuf+0x178>)
     f2a:	429c      	cmp	r4, r3
     f2c:	d166      	bne.n	ffc <setvbuf+0xf0>
     f2e:	686c      	ldr	r4, [r5, #4]
     f30:	f1b8 0f02 	cmp.w	r8, #2
     f34:	d006      	beq.n	f44 <setvbuf+0x38>
     f36:	f1b8 0f01 	cmp.w	r8, #1
     f3a:	f200 809d 	bhi.w	1078 <setvbuf+0x16c>
     f3e:	2e00      	cmp	r6, #0
     f40:	f2c0 809a 	blt.w	1078 <setvbuf+0x16c>
     f44:	6e63      	ldr	r3, [r4, #100]	; 0x64
     f46:	07da      	lsls	r2, r3, #31
     f48:	d405      	bmi.n	f56 <setvbuf+0x4a>
     f4a:	89a3      	ldrh	r3, [r4, #12]
     f4c:	059b      	lsls	r3, r3, #22
     f4e:	d402      	bmi.n	f56 <setvbuf+0x4a>
     f50:	6da0      	ldr	r0, [r4, #88]	; 0x58
     f52:	f000 fb14 	bl	157e <__retarget_lock_acquire_recursive>
     f56:	4621      	mov	r1, r4
     f58:	4628      	mov	r0, r5
     f5a:	f000 f9df 	bl	131c <_fflush_r>
     f5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
     f60:	b141      	cbz	r1, f74 <setvbuf+0x68>
     f62:	f104 0344 	add.w	r3, r4, #68	; 0x44
     f66:	4299      	cmp	r1, r3
     f68:	d002      	beq.n	f70 <setvbuf+0x64>
     f6a:	4628      	mov	r0, r5
     f6c:	f000 fb76 	bl	165c <_free_r>
     f70:	2300      	movs	r3, #0
     f72:	6363      	str	r3, [r4, #52]	; 0x34
     f74:	2300      	movs	r3, #0
     f76:	61a3      	str	r3, [r4, #24]
     f78:	6063      	str	r3, [r4, #4]
     f7a:	89a3      	ldrh	r3, [r4, #12]
     f7c:	0618      	lsls	r0, r3, #24
     f7e:	d503      	bpl.n	f88 <setvbuf+0x7c>
     f80:	6921      	ldr	r1, [r4, #16]
     f82:	4628      	mov	r0, r5
     f84:	f000 fb6a 	bl	165c <_free_r>
     f88:	89a3      	ldrh	r3, [r4, #12]
     f8a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
     f8e:	f023 0303 	bic.w	r3, r3, #3
     f92:	f1b8 0f02 	cmp.w	r8, #2
     f96:	81a3      	strh	r3, [r4, #12]
     f98:	d06a      	beq.n	1070 <setvbuf+0x164>
     f9a:	ab01      	add	r3, sp, #4
     f9c:	466a      	mov	r2, sp
     f9e:	4621      	mov	r1, r4
     fa0:	4628      	mov	r0, r5
     fa2:	f000 faee 	bl	1582 <__swhatbuf_r>
     fa6:	89a3      	ldrh	r3, [r4, #12]
     fa8:	4318      	orrs	r0, r3
     faa:	81a0      	strh	r0, [r4, #12]
     fac:	2e00      	cmp	r6, #0
     fae:	d12f      	bne.n	1010 <setvbuf+0x104>
     fb0:	9e00      	ldr	r6, [sp, #0]
     fb2:	4630      	mov	r0, r6
     fb4:	f000 fb4a 	bl	164c <malloc>
     fb8:	4607      	mov	r7, r0
     fba:	2800      	cmp	r0, #0
     fbc:	d153      	bne.n	1066 <setvbuf+0x15a>
     fbe:	f8dd 9000 	ldr.w	r9, [sp]
     fc2:	45b1      	cmp	r9, r6
     fc4:	d148      	bne.n	1058 <setvbuf+0x14c>
     fc6:	f04f 35ff 	mov.w	r5, #4294967295
     fca:	2200      	movs	r2, #0
     fcc:	60a2      	str	r2, [r4, #8]
     fce:	f104 0247 	add.w	r2, r4, #71	; 0x47
     fd2:	6022      	str	r2, [r4, #0]
     fd4:	6122      	str	r2, [r4, #16]
     fd6:	2201      	movs	r2, #1
     fd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
     fdc:	6162      	str	r2, [r4, #20]
     fde:	6e62      	ldr	r2, [r4, #100]	; 0x64
     fe0:	f043 0302 	orr.w	r3, r3, #2
     fe4:	07d1      	lsls	r1, r2, #31
     fe6:	81a3      	strh	r3, [r4, #12]
     fe8:	d404      	bmi.n	ff4 <setvbuf+0xe8>
     fea:	059b      	lsls	r3, r3, #22
     fec:	d402      	bmi.n	ff4 <setvbuf+0xe8>
     fee:	6da0      	ldr	r0, [r4, #88]	; 0x58
     ff0:	f000 fac6 	bl	1580 <__retarget_lock_release_recursive>
     ff4:	4628      	mov	r0, r5
     ff6:	b003      	add	sp, #12
     ff8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     ffc:	4b22      	ldr	r3, [pc, #136]	; (1088 <setvbuf+0x17c>)
     ffe:	429c      	cmp	r4, r3
    1000:	d101      	bne.n	1006 <setvbuf+0xfa>
    1002:	68ac      	ldr	r4, [r5, #8]
    1004:	e794      	b.n	f30 <setvbuf+0x24>
    1006:	4b21      	ldr	r3, [pc, #132]	; (108c <setvbuf+0x180>)
    1008:	429c      	cmp	r4, r3
    100a:	bf08      	it	eq
    100c:	68ec      	ldreq	r4, [r5, #12]
    100e:	e78f      	b.n	f30 <setvbuf+0x24>
    1010:	2f00      	cmp	r7, #0
    1012:	d0ce      	beq.n	fb2 <setvbuf+0xa6>
    1014:	69ab      	ldr	r3, [r5, #24]
    1016:	b913      	cbnz	r3, 101e <setvbuf+0x112>
    1018:	4628      	mov	r0, r5
    101a:	f000 fa13 	bl	1444 <__sinit>
    101e:	f1b8 0f01 	cmp.w	r8, #1
    1022:	bf08      	it	eq
    1024:	89a3      	ldrheq	r3, [r4, #12]
    1026:	6027      	str	r7, [r4, #0]
    1028:	bf04      	itt	eq
    102a:	f043 0301 	orreq.w	r3, r3, #1
    102e:	81a3      	strheq	r3, [r4, #12]
    1030:	89a3      	ldrh	r3, [r4, #12]
    1032:	f013 0208 	ands.w	r2, r3, #8
    1036:	e9c4 7604 	strd	r7, r6, [r4, #16]
    103a:	d01b      	beq.n	1074 <setvbuf+0x168>
    103c:	07da      	lsls	r2, r3, #31
    103e:	bf41      	itttt	mi
    1040:	2200      	movmi	r2, #0
    1042:	4276      	negmi	r6, r6
    1044:	60a2      	strmi	r2, [r4, #8]
    1046:	61a6      	strmi	r6, [r4, #24]
    1048:	bf58      	it	pl
    104a:	60a6      	strpl	r6, [r4, #8]
    104c:	6e65      	ldr	r5, [r4, #100]	; 0x64
    104e:	f015 0501 	ands.w	r5, r5, #1
    1052:	d0ca      	beq.n	fea <setvbuf+0xde>
    1054:	2500      	movs	r5, #0
    1056:	e7cd      	b.n	ff4 <setvbuf+0xe8>
    1058:	4648      	mov	r0, r9
    105a:	f000 faf7 	bl	164c <malloc>
    105e:	4607      	mov	r7, r0
    1060:	2800      	cmp	r0, #0
    1062:	d0b0      	beq.n	fc6 <setvbuf+0xba>
    1064:	464e      	mov	r6, r9
    1066:	89a3      	ldrh	r3, [r4, #12]
    1068:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    106c:	81a3      	strh	r3, [r4, #12]
    106e:	e7d1      	b.n	1014 <setvbuf+0x108>
    1070:	2500      	movs	r5, #0
    1072:	e7aa      	b.n	fca <setvbuf+0xbe>
    1074:	60a2      	str	r2, [r4, #8]
    1076:	e7e9      	b.n	104c <setvbuf+0x140>
    1078:	f04f 35ff 	mov.w	r5, #4294967295
    107c:	e7ba      	b.n	ff4 <setvbuf+0xe8>
    107e:	bf00      	nop
    1080:	20000000 	.word	0x20000000
    1084:	0000231c 	.word	0x0000231c
    1088:	0000233c 	.word	0x0000233c
    108c:	000022fc 	.word	0x000022fc

00001090 <__swbuf_r>:
    1090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1092:	460e      	mov	r6, r1
    1094:	4614      	mov	r4, r2
    1096:	4605      	mov	r5, r0
    1098:	b118      	cbz	r0, 10a2 <__swbuf_r+0x12>
    109a:	6983      	ldr	r3, [r0, #24]
    109c:	b90b      	cbnz	r3, 10a2 <__swbuf_r+0x12>
    109e:	f000 f9d1 	bl	1444 <__sinit>
    10a2:	4b21      	ldr	r3, [pc, #132]	; (1128 <__swbuf_r+0x98>)
    10a4:	429c      	cmp	r4, r3
    10a6:	d12b      	bne.n	1100 <__swbuf_r+0x70>
    10a8:	686c      	ldr	r4, [r5, #4]
    10aa:	69a3      	ldr	r3, [r4, #24]
    10ac:	60a3      	str	r3, [r4, #8]
    10ae:	89a3      	ldrh	r3, [r4, #12]
    10b0:	071a      	lsls	r2, r3, #28
    10b2:	d52f      	bpl.n	1114 <__swbuf_r+0x84>
    10b4:	6923      	ldr	r3, [r4, #16]
    10b6:	b36b      	cbz	r3, 1114 <__swbuf_r+0x84>
    10b8:	6923      	ldr	r3, [r4, #16]
    10ba:	6820      	ldr	r0, [r4, #0]
    10bc:	1ac0      	subs	r0, r0, r3
    10be:	6963      	ldr	r3, [r4, #20]
    10c0:	b2f6      	uxtb	r6, r6
    10c2:	4283      	cmp	r3, r0
    10c4:	4637      	mov	r7, r6
    10c6:	dc04      	bgt.n	10d2 <__swbuf_r+0x42>
    10c8:	4621      	mov	r1, r4
    10ca:	4628      	mov	r0, r5
    10cc:	f000 f926 	bl	131c <_fflush_r>
    10d0:	bb30      	cbnz	r0, 1120 <__swbuf_r+0x90>
    10d2:	68a3      	ldr	r3, [r4, #8]
    10d4:	3b01      	subs	r3, #1
    10d6:	60a3      	str	r3, [r4, #8]
    10d8:	6823      	ldr	r3, [r4, #0]
    10da:	1c5a      	adds	r2, r3, #1
    10dc:	6022      	str	r2, [r4, #0]
    10de:	701e      	strb	r6, [r3, #0]
    10e0:	6963      	ldr	r3, [r4, #20]
    10e2:	3001      	adds	r0, #1
    10e4:	4283      	cmp	r3, r0
    10e6:	d004      	beq.n	10f2 <__swbuf_r+0x62>
    10e8:	89a3      	ldrh	r3, [r4, #12]
    10ea:	07db      	lsls	r3, r3, #31
    10ec:	d506      	bpl.n	10fc <__swbuf_r+0x6c>
    10ee:	2e0a      	cmp	r6, #10
    10f0:	d104      	bne.n	10fc <__swbuf_r+0x6c>
    10f2:	4621      	mov	r1, r4
    10f4:	4628      	mov	r0, r5
    10f6:	f000 f911 	bl	131c <_fflush_r>
    10fa:	b988      	cbnz	r0, 1120 <__swbuf_r+0x90>
    10fc:	4638      	mov	r0, r7
    10fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1100:	4b0a      	ldr	r3, [pc, #40]	; (112c <__swbuf_r+0x9c>)
    1102:	429c      	cmp	r4, r3
    1104:	d101      	bne.n	110a <__swbuf_r+0x7a>
    1106:	68ac      	ldr	r4, [r5, #8]
    1108:	e7cf      	b.n	10aa <__swbuf_r+0x1a>
    110a:	4b09      	ldr	r3, [pc, #36]	; (1130 <__swbuf_r+0xa0>)
    110c:	429c      	cmp	r4, r3
    110e:	bf08      	it	eq
    1110:	68ec      	ldreq	r4, [r5, #12]
    1112:	e7ca      	b.n	10aa <__swbuf_r+0x1a>
    1114:	4621      	mov	r1, r4
    1116:	4628      	mov	r0, r5
    1118:	f000 f80c 	bl	1134 <__swsetup_r>
    111c:	2800      	cmp	r0, #0
    111e:	d0cb      	beq.n	10b8 <__swbuf_r+0x28>
    1120:	f04f 37ff 	mov.w	r7, #4294967295
    1124:	e7ea      	b.n	10fc <__swbuf_r+0x6c>
    1126:	bf00      	nop
    1128:	0000231c 	.word	0x0000231c
    112c:	0000233c 	.word	0x0000233c
    1130:	000022fc 	.word	0x000022fc

00001134 <__swsetup_r>:
    1134:	4b32      	ldr	r3, [pc, #200]	; (1200 <__swsetup_r+0xcc>)
    1136:	b570      	push	{r4, r5, r6, lr}
    1138:	681d      	ldr	r5, [r3, #0]
    113a:	4606      	mov	r6, r0
    113c:	460c      	mov	r4, r1
    113e:	b125      	cbz	r5, 114a <__swsetup_r+0x16>
    1140:	69ab      	ldr	r3, [r5, #24]
    1142:	b913      	cbnz	r3, 114a <__swsetup_r+0x16>
    1144:	4628      	mov	r0, r5
    1146:	f000 f97d 	bl	1444 <__sinit>
    114a:	4b2e      	ldr	r3, [pc, #184]	; (1204 <__swsetup_r+0xd0>)
    114c:	429c      	cmp	r4, r3
    114e:	d10f      	bne.n	1170 <__swsetup_r+0x3c>
    1150:	686c      	ldr	r4, [r5, #4]
    1152:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    1156:	b29a      	uxth	r2, r3
    1158:	0715      	lsls	r5, r2, #28
    115a:	d42c      	bmi.n	11b6 <__swsetup_r+0x82>
    115c:	06d0      	lsls	r0, r2, #27
    115e:	d411      	bmi.n	1184 <__swsetup_r+0x50>
    1160:	2209      	movs	r2, #9
    1162:	6032      	str	r2, [r6, #0]
    1164:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1168:	81a3      	strh	r3, [r4, #12]
    116a:	f04f 30ff 	mov.w	r0, #4294967295
    116e:	e03e      	b.n	11ee <__swsetup_r+0xba>
    1170:	4b25      	ldr	r3, [pc, #148]	; (1208 <__swsetup_r+0xd4>)
    1172:	429c      	cmp	r4, r3
    1174:	d101      	bne.n	117a <__swsetup_r+0x46>
    1176:	68ac      	ldr	r4, [r5, #8]
    1178:	e7eb      	b.n	1152 <__swsetup_r+0x1e>
    117a:	4b24      	ldr	r3, [pc, #144]	; (120c <__swsetup_r+0xd8>)
    117c:	429c      	cmp	r4, r3
    117e:	bf08      	it	eq
    1180:	68ec      	ldreq	r4, [r5, #12]
    1182:	e7e6      	b.n	1152 <__swsetup_r+0x1e>
    1184:	0751      	lsls	r1, r2, #29
    1186:	d512      	bpl.n	11ae <__swsetup_r+0x7a>
    1188:	6b61      	ldr	r1, [r4, #52]	; 0x34
    118a:	b141      	cbz	r1, 119e <__swsetup_r+0x6a>
    118c:	f104 0344 	add.w	r3, r4, #68	; 0x44
    1190:	4299      	cmp	r1, r3
    1192:	d002      	beq.n	119a <__swsetup_r+0x66>
    1194:	4630      	mov	r0, r6
    1196:	f000 fa61 	bl	165c <_free_r>
    119a:	2300      	movs	r3, #0
    119c:	6363      	str	r3, [r4, #52]	; 0x34
    119e:	89a3      	ldrh	r3, [r4, #12]
    11a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    11a4:	81a3      	strh	r3, [r4, #12]
    11a6:	2300      	movs	r3, #0
    11a8:	6063      	str	r3, [r4, #4]
    11aa:	6923      	ldr	r3, [r4, #16]
    11ac:	6023      	str	r3, [r4, #0]
    11ae:	89a3      	ldrh	r3, [r4, #12]
    11b0:	f043 0308 	orr.w	r3, r3, #8
    11b4:	81a3      	strh	r3, [r4, #12]
    11b6:	6923      	ldr	r3, [r4, #16]
    11b8:	b94b      	cbnz	r3, 11ce <__swsetup_r+0x9a>
    11ba:	89a3      	ldrh	r3, [r4, #12]
    11bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
    11c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    11c4:	d003      	beq.n	11ce <__swsetup_r+0x9a>
    11c6:	4621      	mov	r1, r4
    11c8:	4630      	mov	r0, r6
    11ca:	f000 f9ff 	bl	15cc <__smakebuf_r>
    11ce:	89a2      	ldrh	r2, [r4, #12]
    11d0:	f012 0301 	ands.w	r3, r2, #1
    11d4:	d00c      	beq.n	11f0 <__swsetup_r+0xbc>
    11d6:	2300      	movs	r3, #0
    11d8:	60a3      	str	r3, [r4, #8]
    11da:	6963      	ldr	r3, [r4, #20]
    11dc:	425b      	negs	r3, r3
    11de:	61a3      	str	r3, [r4, #24]
    11e0:	6923      	ldr	r3, [r4, #16]
    11e2:	b953      	cbnz	r3, 11fa <__swsetup_r+0xc6>
    11e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    11e8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
    11ec:	d1ba      	bne.n	1164 <__swsetup_r+0x30>
    11ee:	bd70      	pop	{r4, r5, r6, pc}
    11f0:	0792      	lsls	r2, r2, #30
    11f2:	bf58      	it	pl
    11f4:	6963      	ldrpl	r3, [r4, #20]
    11f6:	60a3      	str	r3, [r4, #8]
    11f8:	e7f2      	b.n	11e0 <__swsetup_r+0xac>
    11fa:	2000      	movs	r0, #0
    11fc:	e7f7      	b.n	11ee <__swsetup_r+0xba>
    11fe:	bf00      	nop
    1200:	20000000 	.word	0x20000000
    1204:	0000231c 	.word	0x0000231c
    1208:	0000233c 	.word	0x0000233c
    120c:	000022fc 	.word	0x000022fc

00001210 <__sflush_r>:
    1210:	898a      	ldrh	r2, [r1, #12]
    1212:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1216:	4605      	mov	r5, r0
    1218:	0710      	lsls	r0, r2, #28
    121a:	460c      	mov	r4, r1
    121c:	d458      	bmi.n	12d0 <__sflush_r+0xc0>
    121e:	684b      	ldr	r3, [r1, #4]
    1220:	2b00      	cmp	r3, #0
    1222:	dc05      	bgt.n	1230 <__sflush_r+0x20>
    1224:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    1226:	2b00      	cmp	r3, #0
    1228:	dc02      	bgt.n	1230 <__sflush_r+0x20>
    122a:	2000      	movs	r0, #0
    122c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1230:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    1232:	2e00      	cmp	r6, #0
    1234:	d0f9      	beq.n	122a <__sflush_r+0x1a>
    1236:	2300      	movs	r3, #0
    1238:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    123c:	682f      	ldr	r7, [r5, #0]
    123e:	602b      	str	r3, [r5, #0]
    1240:	d032      	beq.n	12a8 <__sflush_r+0x98>
    1242:	6d60      	ldr	r0, [r4, #84]	; 0x54
    1244:	89a3      	ldrh	r3, [r4, #12]
    1246:	075a      	lsls	r2, r3, #29
    1248:	d505      	bpl.n	1256 <__sflush_r+0x46>
    124a:	6863      	ldr	r3, [r4, #4]
    124c:	1ac0      	subs	r0, r0, r3
    124e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    1250:	b10b      	cbz	r3, 1256 <__sflush_r+0x46>
    1252:	6c23      	ldr	r3, [r4, #64]	; 0x40
    1254:	1ac0      	subs	r0, r0, r3
    1256:	2300      	movs	r3, #0
    1258:	4602      	mov	r2, r0
    125a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    125c:	6a21      	ldr	r1, [r4, #32]
    125e:	4628      	mov	r0, r5
    1260:	47b0      	blx	r6
    1262:	1c43      	adds	r3, r0, #1
    1264:	89a3      	ldrh	r3, [r4, #12]
    1266:	d106      	bne.n	1276 <__sflush_r+0x66>
    1268:	6829      	ldr	r1, [r5, #0]
    126a:	291d      	cmp	r1, #29
    126c:	d849      	bhi.n	1302 <__sflush_r+0xf2>
    126e:	4a2a      	ldr	r2, [pc, #168]	; (1318 <__sflush_r+0x108>)
    1270:	40ca      	lsrs	r2, r1
    1272:	07d6      	lsls	r6, r2, #31
    1274:	d545      	bpl.n	1302 <__sflush_r+0xf2>
    1276:	2200      	movs	r2, #0
    1278:	6062      	str	r2, [r4, #4]
    127a:	04d9      	lsls	r1, r3, #19
    127c:	6922      	ldr	r2, [r4, #16]
    127e:	6022      	str	r2, [r4, #0]
    1280:	d504      	bpl.n	128c <__sflush_r+0x7c>
    1282:	1c42      	adds	r2, r0, #1
    1284:	d101      	bne.n	128a <__sflush_r+0x7a>
    1286:	682b      	ldr	r3, [r5, #0]
    1288:	b903      	cbnz	r3, 128c <__sflush_r+0x7c>
    128a:	6560      	str	r0, [r4, #84]	; 0x54
    128c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    128e:	602f      	str	r7, [r5, #0]
    1290:	2900      	cmp	r1, #0
    1292:	d0ca      	beq.n	122a <__sflush_r+0x1a>
    1294:	f104 0344 	add.w	r3, r4, #68	; 0x44
    1298:	4299      	cmp	r1, r3
    129a:	d002      	beq.n	12a2 <__sflush_r+0x92>
    129c:	4628      	mov	r0, r5
    129e:	f000 f9dd 	bl	165c <_free_r>
    12a2:	2000      	movs	r0, #0
    12a4:	6360      	str	r0, [r4, #52]	; 0x34
    12a6:	e7c1      	b.n	122c <__sflush_r+0x1c>
    12a8:	6a21      	ldr	r1, [r4, #32]
    12aa:	2301      	movs	r3, #1
    12ac:	4628      	mov	r0, r5
    12ae:	47b0      	blx	r6
    12b0:	1c41      	adds	r1, r0, #1
    12b2:	d1c7      	bne.n	1244 <__sflush_r+0x34>
    12b4:	682b      	ldr	r3, [r5, #0]
    12b6:	2b00      	cmp	r3, #0
    12b8:	d0c4      	beq.n	1244 <__sflush_r+0x34>
    12ba:	2b1d      	cmp	r3, #29
    12bc:	d001      	beq.n	12c2 <__sflush_r+0xb2>
    12be:	2b16      	cmp	r3, #22
    12c0:	d101      	bne.n	12c6 <__sflush_r+0xb6>
    12c2:	602f      	str	r7, [r5, #0]
    12c4:	e7b1      	b.n	122a <__sflush_r+0x1a>
    12c6:	89a3      	ldrh	r3, [r4, #12]
    12c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    12cc:	81a3      	strh	r3, [r4, #12]
    12ce:	e7ad      	b.n	122c <__sflush_r+0x1c>
    12d0:	690f      	ldr	r7, [r1, #16]
    12d2:	2f00      	cmp	r7, #0
    12d4:	d0a9      	beq.n	122a <__sflush_r+0x1a>
    12d6:	0793      	lsls	r3, r2, #30
    12d8:	680e      	ldr	r6, [r1, #0]
    12da:	bf08      	it	eq
    12dc:	694b      	ldreq	r3, [r1, #20]
    12de:	600f      	str	r7, [r1, #0]
    12e0:	bf18      	it	ne
    12e2:	2300      	movne	r3, #0
    12e4:	eba6 0807 	sub.w	r8, r6, r7
    12e8:	608b      	str	r3, [r1, #8]
    12ea:	f1b8 0f00 	cmp.w	r8, #0
    12ee:	dd9c      	ble.n	122a <__sflush_r+0x1a>
    12f0:	4643      	mov	r3, r8
    12f2:	463a      	mov	r2, r7
    12f4:	6a21      	ldr	r1, [r4, #32]
    12f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    12f8:	4628      	mov	r0, r5
    12fa:	47b0      	blx	r6
    12fc:	2800      	cmp	r0, #0
    12fe:	dc06      	bgt.n	130e <__sflush_r+0xfe>
    1300:	89a3      	ldrh	r3, [r4, #12]
    1302:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1306:	81a3      	strh	r3, [r4, #12]
    1308:	f04f 30ff 	mov.w	r0, #4294967295
    130c:	e78e      	b.n	122c <__sflush_r+0x1c>
    130e:	4407      	add	r7, r0
    1310:	eba8 0800 	sub.w	r8, r8, r0
    1314:	e7e9      	b.n	12ea <__sflush_r+0xda>
    1316:	bf00      	nop
    1318:	20400001 	.word	0x20400001

0000131c <_fflush_r>:
    131c:	b538      	push	{r3, r4, r5, lr}
    131e:	690b      	ldr	r3, [r1, #16]
    1320:	4605      	mov	r5, r0
    1322:	460c      	mov	r4, r1
    1324:	b913      	cbnz	r3, 132c <_fflush_r+0x10>
    1326:	2500      	movs	r5, #0
    1328:	4628      	mov	r0, r5
    132a:	bd38      	pop	{r3, r4, r5, pc}
    132c:	b118      	cbz	r0, 1336 <_fflush_r+0x1a>
    132e:	6983      	ldr	r3, [r0, #24]
    1330:	b90b      	cbnz	r3, 1336 <_fflush_r+0x1a>
    1332:	f000 f887 	bl	1444 <__sinit>
    1336:	4b14      	ldr	r3, [pc, #80]	; (1388 <_fflush_r+0x6c>)
    1338:	429c      	cmp	r4, r3
    133a:	d11b      	bne.n	1374 <_fflush_r+0x58>
    133c:	686c      	ldr	r4, [r5, #4]
    133e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    1342:	2b00      	cmp	r3, #0
    1344:	d0ef      	beq.n	1326 <_fflush_r+0xa>
    1346:	6e62      	ldr	r2, [r4, #100]	; 0x64
    1348:	07d0      	lsls	r0, r2, #31
    134a:	d404      	bmi.n	1356 <_fflush_r+0x3a>
    134c:	0599      	lsls	r1, r3, #22
    134e:	d402      	bmi.n	1356 <_fflush_r+0x3a>
    1350:	6da0      	ldr	r0, [r4, #88]	; 0x58
    1352:	f000 f914 	bl	157e <__retarget_lock_acquire_recursive>
    1356:	4628      	mov	r0, r5
    1358:	4621      	mov	r1, r4
    135a:	f7ff ff59 	bl	1210 <__sflush_r>
    135e:	6e63      	ldr	r3, [r4, #100]	; 0x64
    1360:	07da      	lsls	r2, r3, #31
    1362:	4605      	mov	r5, r0
    1364:	d4e0      	bmi.n	1328 <_fflush_r+0xc>
    1366:	89a3      	ldrh	r3, [r4, #12]
    1368:	059b      	lsls	r3, r3, #22
    136a:	d4dd      	bmi.n	1328 <_fflush_r+0xc>
    136c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    136e:	f000 f907 	bl	1580 <__retarget_lock_release_recursive>
    1372:	e7d9      	b.n	1328 <_fflush_r+0xc>
    1374:	4b05      	ldr	r3, [pc, #20]	; (138c <_fflush_r+0x70>)
    1376:	429c      	cmp	r4, r3
    1378:	d101      	bne.n	137e <_fflush_r+0x62>
    137a:	68ac      	ldr	r4, [r5, #8]
    137c:	e7df      	b.n	133e <_fflush_r+0x22>
    137e:	4b04      	ldr	r3, [pc, #16]	; (1390 <_fflush_r+0x74>)
    1380:	429c      	cmp	r4, r3
    1382:	bf08      	it	eq
    1384:	68ec      	ldreq	r4, [r5, #12]
    1386:	e7da      	b.n	133e <_fflush_r+0x22>
    1388:	0000231c 	.word	0x0000231c
    138c:	0000233c 	.word	0x0000233c
    1390:	000022fc 	.word	0x000022fc

00001394 <std>:
    1394:	2300      	movs	r3, #0
    1396:	b510      	push	{r4, lr}
    1398:	4604      	mov	r4, r0
    139a:	e9c0 3300 	strd	r3, r3, [r0]
    139e:	6083      	str	r3, [r0, #8]
    13a0:	8181      	strh	r1, [r0, #12]
    13a2:	6643      	str	r3, [r0, #100]	; 0x64
    13a4:	81c2      	strh	r2, [r0, #14]
    13a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
    13aa:	6183      	str	r3, [r0, #24]
    13ac:	4619      	mov	r1, r3
    13ae:	2208      	movs	r2, #8
    13b0:	305c      	adds	r0, #92	; 0x5c
    13b2:	f7ff fd25 	bl	e00 <memset>
    13b6:	4b05      	ldr	r3, [pc, #20]	; (13cc <std+0x38>)
    13b8:	6263      	str	r3, [r4, #36]	; 0x24
    13ba:	4b05      	ldr	r3, [pc, #20]	; (13d0 <std+0x3c>)
    13bc:	62a3      	str	r3, [r4, #40]	; 0x28
    13be:	4b05      	ldr	r3, [pc, #20]	; (13d4 <std+0x40>)
    13c0:	62e3      	str	r3, [r4, #44]	; 0x2c
    13c2:	4b05      	ldr	r3, [pc, #20]	; (13d8 <std+0x44>)
    13c4:	6224      	str	r4, [r4, #32]
    13c6:	6323      	str	r3, [r4, #48]	; 0x30
    13c8:	bd10      	pop	{r4, pc}
    13ca:	bf00      	nop
    13cc:	000017cd 	.word	0x000017cd
    13d0:	000017ef 	.word	0x000017ef
    13d4:	00001827 	.word	0x00001827
    13d8:	0000184b 	.word	0x0000184b

000013dc <_cleanup_r>:
    13dc:	4901      	ldr	r1, [pc, #4]	; (13e4 <_cleanup_r+0x8>)
    13de:	f000 b8af 	b.w	1540 <_fwalk_reent>
    13e2:	bf00      	nop
    13e4:	0000131d 	.word	0x0000131d

000013e8 <__sfmoreglue>:
    13e8:	b570      	push	{r4, r5, r6, lr}
    13ea:	1e4a      	subs	r2, r1, #1
    13ec:	2568      	movs	r5, #104	; 0x68
    13ee:	4355      	muls	r5, r2
    13f0:	460e      	mov	r6, r1
    13f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
    13f6:	f000 f97f 	bl	16f8 <_malloc_r>
    13fa:	4604      	mov	r4, r0
    13fc:	b140      	cbz	r0, 1410 <__sfmoreglue+0x28>
    13fe:	2100      	movs	r1, #0
    1400:	e9c0 1600 	strd	r1, r6, [r0]
    1404:	300c      	adds	r0, #12
    1406:	60a0      	str	r0, [r4, #8]
    1408:	f105 0268 	add.w	r2, r5, #104	; 0x68
    140c:	f7ff fcf8 	bl	e00 <memset>
    1410:	4620      	mov	r0, r4
    1412:	bd70      	pop	{r4, r5, r6, pc}

00001414 <__sfp_lock_acquire>:
    1414:	4801      	ldr	r0, [pc, #4]	; (141c <__sfp_lock_acquire+0x8>)
    1416:	f000 b8b2 	b.w	157e <__retarget_lock_acquire_recursive>
    141a:	bf00      	nop
    141c:	20000094 	.word	0x20000094

00001420 <__sfp_lock_release>:
    1420:	4801      	ldr	r0, [pc, #4]	; (1428 <__sfp_lock_release+0x8>)
    1422:	f000 b8ad 	b.w	1580 <__retarget_lock_release_recursive>
    1426:	bf00      	nop
    1428:	20000094 	.word	0x20000094

0000142c <__sinit_lock_acquire>:
    142c:	4801      	ldr	r0, [pc, #4]	; (1434 <__sinit_lock_acquire+0x8>)
    142e:	f000 b8a6 	b.w	157e <__retarget_lock_acquire_recursive>
    1432:	bf00      	nop
    1434:	2000008f 	.word	0x2000008f

00001438 <__sinit_lock_release>:
    1438:	4801      	ldr	r0, [pc, #4]	; (1440 <__sinit_lock_release+0x8>)
    143a:	f000 b8a1 	b.w	1580 <__retarget_lock_release_recursive>
    143e:	bf00      	nop
    1440:	2000008f 	.word	0x2000008f

00001444 <__sinit>:
    1444:	b510      	push	{r4, lr}
    1446:	4604      	mov	r4, r0
    1448:	f7ff fff0 	bl	142c <__sinit_lock_acquire>
    144c:	69a3      	ldr	r3, [r4, #24]
    144e:	b11b      	cbz	r3, 1458 <__sinit+0x14>
    1450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1454:	f7ff bff0 	b.w	1438 <__sinit_lock_release>
    1458:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
    145c:	6523      	str	r3, [r4, #80]	; 0x50
    145e:	4b13      	ldr	r3, [pc, #76]	; (14ac <__sinit+0x68>)
    1460:	4a13      	ldr	r2, [pc, #76]	; (14b0 <__sinit+0x6c>)
    1462:	681b      	ldr	r3, [r3, #0]
    1464:	62a2      	str	r2, [r4, #40]	; 0x28
    1466:	42a3      	cmp	r3, r4
    1468:	bf04      	itt	eq
    146a:	2301      	moveq	r3, #1
    146c:	61a3      	streq	r3, [r4, #24]
    146e:	4620      	mov	r0, r4
    1470:	f000 f820 	bl	14b4 <__sfp>
    1474:	6060      	str	r0, [r4, #4]
    1476:	4620      	mov	r0, r4
    1478:	f000 f81c 	bl	14b4 <__sfp>
    147c:	60a0      	str	r0, [r4, #8]
    147e:	4620      	mov	r0, r4
    1480:	f000 f818 	bl	14b4 <__sfp>
    1484:	2200      	movs	r2, #0
    1486:	60e0      	str	r0, [r4, #12]
    1488:	2104      	movs	r1, #4
    148a:	6860      	ldr	r0, [r4, #4]
    148c:	f7ff ff82 	bl	1394 <std>
    1490:	2201      	movs	r2, #1
    1492:	2109      	movs	r1, #9
    1494:	68a0      	ldr	r0, [r4, #8]
    1496:	f7ff ff7d 	bl	1394 <std>
    149a:	2202      	movs	r2, #2
    149c:	2112      	movs	r1, #18
    149e:	68e0      	ldr	r0, [r4, #12]
    14a0:	f7ff ff78 	bl	1394 <std>
    14a4:	2301      	movs	r3, #1
    14a6:	61a3      	str	r3, [r4, #24]
    14a8:	e7d2      	b.n	1450 <__sinit+0xc>
    14aa:	bf00      	nop
    14ac:	000022f8 	.word	0x000022f8
    14b0:	000013dd 	.word	0x000013dd

000014b4 <__sfp>:
    14b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    14b6:	4607      	mov	r7, r0
    14b8:	f7ff ffac 	bl	1414 <__sfp_lock_acquire>
    14bc:	4b1e      	ldr	r3, [pc, #120]	; (1538 <__sfp+0x84>)
    14be:	681e      	ldr	r6, [r3, #0]
    14c0:	69b3      	ldr	r3, [r6, #24]
    14c2:	b913      	cbnz	r3, 14ca <__sfp+0x16>
    14c4:	4630      	mov	r0, r6
    14c6:	f7ff ffbd 	bl	1444 <__sinit>
    14ca:	3648      	adds	r6, #72	; 0x48
    14cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
    14d0:	3b01      	subs	r3, #1
    14d2:	d503      	bpl.n	14dc <__sfp+0x28>
    14d4:	6833      	ldr	r3, [r6, #0]
    14d6:	b30b      	cbz	r3, 151c <__sfp+0x68>
    14d8:	6836      	ldr	r6, [r6, #0]
    14da:	e7f7      	b.n	14cc <__sfp+0x18>
    14dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    14e0:	b9d5      	cbnz	r5, 1518 <__sfp+0x64>
    14e2:	4b16      	ldr	r3, [pc, #88]	; (153c <__sfp+0x88>)
    14e4:	60e3      	str	r3, [r4, #12]
    14e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
    14ea:	6665      	str	r5, [r4, #100]	; 0x64
    14ec:	f000 f846 	bl	157c <__retarget_lock_init_recursive>
    14f0:	f7ff ff96 	bl	1420 <__sfp_lock_release>
    14f4:	6025      	str	r5, [r4, #0]
    14f6:	e9c4 5501 	strd	r5, r5, [r4, #4]
    14fa:	e9c4 5504 	strd	r5, r5, [r4, #16]
    14fe:	61a5      	str	r5, [r4, #24]
    1500:	2208      	movs	r2, #8
    1502:	4629      	mov	r1, r5
    1504:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    1508:	f7ff fc7a 	bl	e00 <memset>
    150c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
    1510:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
    1514:	4620      	mov	r0, r4
    1516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1518:	3468      	adds	r4, #104	; 0x68
    151a:	e7d9      	b.n	14d0 <__sfp+0x1c>
    151c:	2104      	movs	r1, #4
    151e:	4638      	mov	r0, r7
    1520:	f7ff ff62 	bl	13e8 <__sfmoreglue>
    1524:	4604      	mov	r4, r0
    1526:	6030      	str	r0, [r6, #0]
    1528:	2800      	cmp	r0, #0
    152a:	d1d5      	bne.n	14d8 <__sfp+0x24>
    152c:	f7ff ff78 	bl	1420 <__sfp_lock_release>
    1530:	230c      	movs	r3, #12
    1532:	603b      	str	r3, [r7, #0]
    1534:	e7ee      	b.n	1514 <__sfp+0x60>
    1536:	bf00      	nop
    1538:	000022f8 	.word	0x000022f8
    153c:	ffff0001 	.word	0xffff0001

00001540 <_fwalk_reent>:
    1540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1544:	4680      	mov	r8, r0
    1546:	4689      	mov	r9, r1
    1548:	f100 0448 	add.w	r4, r0, #72	; 0x48
    154c:	2600      	movs	r6, #0
    154e:	b914      	cbnz	r4, 1556 <_fwalk_reent+0x16>
    1550:	4630      	mov	r0, r6
    1552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1556:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
    155a:	3f01      	subs	r7, #1
    155c:	d501      	bpl.n	1562 <_fwalk_reent+0x22>
    155e:	6824      	ldr	r4, [r4, #0]
    1560:	e7f5      	b.n	154e <_fwalk_reent+0xe>
    1562:	89ab      	ldrh	r3, [r5, #12]
    1564:	2b01      	cmp	r3, #1
    1566:	d907      	bls.n	1578 <_fwalk_reent+0x38>
    1568:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    156c:	3301      	adds	r3, #1
    156e:	d003      	beq.n	1578 <_fwalk_reent+0x38>
    1570:	4629      	mov	r1, r5
    1572:	4640      	mov	r0, r8
    1574:	47c8      	blx	r9
    1576:	4306      	orrs	r6, r0
    1578:	3568      	adds	r5, #104	; 0x68
    157a:	e7ee      	b.n	155a <_fwalk_reent+0x1a>

0000157c <__retarget_lock_init_recursive>:
    157c:	4770      	bx	lr

0000157e <__retarget_lock_acquire_recursive>:
    157e:	4770      	bx	lr

00001580 <__retarget_lock_release_recursive>:
    1580:	4770      	bx	lr

00001582 <__swhatbuf_r>:
    1582:	b570      	push	{r4, r5, r6, lr}
    1584:	460e      	mov	r6, r1
    1586:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    158a:	2900      	cmp	r1, #0
    158c:	b096      	sub	sp, #88	; 0x58
    158e:	4614      	mov	r4, r2
    1590:	461d      	mov	r5, r3
    1592:	da07      	bge.n	15a4 <__swhatbuf_r+0x22>
    1594:	2300      	movs	r3, #0
    1596:	602b      	str	r3, [r5, #0]
    1598:	89b3      	ldrh	r3, [r6, #12]
    159a:	061a      	lsls	r2, r3, #24
    159c:	d410      	bmi.n	15c0 <__swhatbuf_r+0x3e>
    159e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    15a2:	e00e      	b.n	15c2 <__swhatbuf_r+0x40>
    15a4:	466a      	mov	r2, sp
    15a6:	f000 f977 	bl	1898 <_fstat_r>
    15aa:	2800      	cmp	r0, #0
    15ac:	dbf2      	blt.n	1594 <__swhatbuf_r+0x12>
    15ae:	9a01      	ldr	r2, [sp, #4]
    15b0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
    15b4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
    15b8:	425a      	negs	r2, r3
    15ba:	415a      	adcs	r2, r3
    15bc:	602a      	str	r2, [r5, #0]
    15be:	e7ee      	b.n	159e <__swhatbuf_r+0x1c>
    15c0:	2340      	movs	r3, #64	; 0x40
    15c2:	2000      	movs	r0, #0
    15c4:	6023      	str	r3, [r4, #0]
    15c6:	b016      	add	sp, #88	; 0x58
    15c8:	bd70      	pop	{r4, r5, r6, pc}
	...

000015cc <__smakebuf_r>:
    15cc:	898b      	ldrh	r3, [r1, #12]
    15ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
    15d0:	079d      	lsls	r5, r3, #30
    15d2:	4606      	mov	r6, r0
    15d4:	460c      	mov	r4, r1
    15d6:	d507      	bpl.n	15e8 <__smakebuf_r+0x1c>
    15d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
    15dc:	6023      	str	r3, [r4, #0]
    15de:	6123      	str	r3, [r4, #16]
    15e0:	2301      	movs	r3, #1
    15e2:	6163      	str	r3, [r4, #20]
    15e4:	b002      	add	sp, #8
    15e6:	bd70      	pop	{r4, r5, r6, pc}
    15e8:	ab01      	add	r3, sp, #4
    15ea:	466a      	mov	r2, sp
    15ec:	f7ff ffc9 	bl	1582 <__swhatbuf_r>
    15f0:	9900      	ldr	r1, [sp, #0]
    15f2:	4605      	mov	r5, r0
    15f4:	4630      	mov	r0, r6
    15f6:	f000 f87f 	bl	16f8 <_malloc_r>
    15fa:	b948      	cbnz	r0, 1610 <__smakebuf_r+0x44>
    15fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    1600:	059a      	lsls	r2, r3, #22
    1602:	d4ef      	bmi.n	15e4 <__smakebuf_r+0x18>
    1604:	f023 0303 	bic.w	r3, r3, #3
    1608:	f043 0302 	orr.w	r3, r3, #2
    160c:	81a3      	strh	r3, [r4, #12]
    160e:	e7e3      	b.n	15d8 <__smakebuf_r+0xc>
    1610:	4b0d      	ldr	r3, [pc, #52]	; (1648 <__smakebuf_r+0x7c>)
    1612:	62b3      	str	r3, [r6, #40]	; 0x28
    1614:	89a3      	ldrh	r3, [r4, #12]
    1616:	6020      	str	r0, [r4, #0]
    1618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    161c:	81a3      	strh	r3, [r4, #12]
    161e:	9b00      	ldr	r3, [sp, #0]
    1620:	6163      	str	r3, [r4, #20]
    1622:	9b01      	ldr	r3, [sp, #4]
    1624:	6120      	str	r0, [r4, #16]
    1626:	b15b      	cbz	r3, 1640 <__smakebuf_r+0x74>
    1628:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    162c:	4630      	mov	r0, r6
    162e:	f000 f945 	bl	18bc <_isatty_r>
    1632:	b128      	cbz	r0, 1640 <__smakebuf_r+0x74>
    1634:	89a3      	ldrh	r3, [r4, #12]
    1636:	f023 0303 	bic.w	r3, r3, #3
    163a:	f043 0301 	orr.w	r3, r3, #1
    163e:	81a3      	strh	r3, [r4, #12]
    1640:	89a3      	ldrh	r3, [r4, #12]
    1642:	431d      	orrs	r5, r3
    1644:	81a5      	strh	r5, [r4, #12]
    1646:	e7cd      	b.n	15e4 <__smakebuf_r+0x18>
    1648:	000013dd 	.word	0x000013dd

0000164c <malloc>:
    164c:	4b02      	ldr	r3, [pc, #8]	; (1658 <malloc+0xc>)
    164e:	4601      	mov	r1, r0
    1650:	6818      	ldr	r0, [r3, #0]
    1652:	f000 b851 	b.w	16f8 <_malloc_r>
    1656:	bf00      	nop
    1658:	20000000 	.word	0x20000000

0000165c <_free_r>:
    165c:	b538      	push	{r3, r4, r5, lr}
    165e:	4605      	mov	r5, r0
    1660:	2900      	cmp	r1, #0
    1662:	d045      	beq.n	16f0 <_free_r+0x94>
    1664:	f851 3c04 	ldr.w	r3, [r1, #-4]
    1668:	1f0c      	subs	r4, r1, #4
    166a:	2b00      	cmp	r3, #0
    166c:	bfb8      	it	lt
    166e:	18e4      	addlt	r4, r4, r3
    1670:	f000 f946 	bl	1900 <__malloc_lock>
    1674:	4a1f      	ldr	r2, [pc, #124]	; (16f4 <_free_r+0x98>)
    1676:	6813      	ldr	r3, [r2, #0]
    1678:	4610      	mov	r0, r2
    167a:	b933      	cbnz	r3, 168a <_free_r+0x2e>
    167c:	6063      	str	r3, [r4, #4]
    167e:	6014      	str	r4, [r2, #0]
    1680:	4628      	mov	r0, r5
    1682:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    1686:	f000 b941 	b.w	190c <__malloc_unlock>
    168a:	42a3      	cmp	r3, r4
    168c:	d90c      	bls.n	16a8 <_free_r+0x4c>
    168e:	6821      	ldr	r1, [r4, #0]
    1690:	1862      	adds	r2, r4, r1
    1692:	4293      	cmp	r3, r2
    1694:	bf04      	itt	eq
    1696:	681a      	ldreq	r2, [r3, #0]
    1698:	685b      	ldreq	r3, [r3, #4]
    169a:	6063      	str	r3, [r4, #4]
    169c:	bf04      	itt	eq
    169e:	1852      	addeq	r2, r2, r1
    16a0:	6022      	streq	r2, [r4, #0]
    16a2:	6004      	str	r4, [r0, #0]
    16a4:	e7ec      	b.n	1680 <_free_r+0x24>
    16a6:	4613      	mov	r3, r2
    16a8:	685a      	ldr	r2, [r3, #4]
    16aa:	b10a      	cbz	r2, 16b0 <_free_r+0x54>
    16ac:	42a2      	cmp	r2, r4
    16ae:	d9fa      	bls.n	16a6 <_free_r+0x4a>
    16b0:	6819      	ldr	r1, [r3, #0]
    16b2:	1858      	adds	r0, r3, r1
    16b4:	42a0      	cmp	r0, r4
    16b6:	d10b      	bne.n	16d0 <_free_r+0x74>
    16b8:	6820      	ldr	r0, [r4, #0]
    16ba:	4401      	add	r1, r0
    16bc:	1858      	adds	r0, r3, r1
    16be:	4282      	cmp	r2, r0
    16c0:	6019      	str	r1, [r3, #0]
    16c2:	d1dd      	bne.n	1680 <_free_r+0x24>
    16c4:	6810      	ldr	r0, [r2, #0]
    16c6:	6852      	ldr	r2, [r2, #4]
    16c8:	605a      	str	r2, [r3, #4]
    16ca:	4401      	add	r1, r0
    16cc:	6019      	str	r1, [r3, #0]
    16ce:	e7d7      	b.n	1680 <_free_r+0x24>
    16d0:	d902      	bls.n	16d8 <_free_r+0x7c>
    16d2:	230c      	movs	r3, #12
    16d4:	602b      	str	r3, [r5, #0]
    16d6:	e7d3      	b.n	1680 <_free_r+0x24>
    16d8:	6820      	ldr	r0, [r4, #0]
    16da:	1821      	adds	r1, r4, r0
    16dc:	428a      	cmp	r2, r1
    16de:	bf04      	itt	eq
    16e0:	6811      	ldreq	r1, [r2, #0]
    16e2:	6852      	ldreq	r2, [r2, #4]
    16e4:	6062      	str	r2, [r4, #4]
    16e6:	bf04      	itt	eq
    16e8:	1809      	addeq	r1, r1, r0
    16ea:	6021      	streq	r1, [r4, #0]
    16ec:	605c      	str	r4, [r3, #4]
    16ee:	e7c7      	b.n	1680 <_free_r+0x24>
    16f0:	bd38      	pop	{r3, r4, r5, pc}
    16f2:	bf00      	nop
    16f4:	20000084 	.word	0x20000084

000016f8 <_malloc_r>:
    16f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    16fa:	1ccd      	adds	r5, r1, #3
    16fc:	f025 0503 	bic.w	r5, r5, #3
    1700:	3508      	adds	r5, #8
    1702:	2d0c      	cmp	r5, #12
    1704:	bf38      	it	cc
    1706:	250c      	movcc	r5, #12
    1708:	2d00      	cmp	r5, #0
    170a:	4606      	mov	r6, r0
    170c:	db01      	blt.n	1712 <_malloc_r+0x1a>
    170e:	42a9      	cmp	r1, r5
    1710:	d903      	bls.n	171a <_malloc_r+0x22>
    1712:	230c      	movs	r3, #12
    1714:	6033      	str	r3, [r6, #0]
    1716:	2000      	movs	r0, #0
    1718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    171a:	f000 f8f1 	bl	1900 <__malloc_lock>
    171e:	4921      	ldr	r1, [pc, #132]	; (17a4 <_malloc_r+0xac>)
    1720:	680a      	ldr	r2, [r1, #0]
    1722:	4614      	mov	r4, r2
    1724:	b99c      	cbnz	r4, 174e <_malloc_r+0x56>
    1726:	4f20      	ldr	r7, [pc, #128]	; (17a8 <_malloc_r+0xb0>)
    1728:	683b      	ldr	r3, [r7, #0]
    172a:	b923      	cbnz	r3, 1736 <_malloc_r+0x3e>
    172c:	4621      	mov	r1, r4
    172e:	4630      	mov	r0, r6
    1730:	f000 f83c 	bl	17ac <_sbrk_r>
    1734:	6038      	str	r0, [r7, #0]
    1736:	4629      	mov	r1, r5
    1738:	4630      	mov	r0, r6
    173a:	f000 f837 	bl	17ac <_sbrk_r>
    173e:	1c43      	adds	r3, r0, #1
    1740:	d123      	bne.n	178a <_malloc_r+0x92>
    1742:	230c      	movs	r3, #12
    1744:	6033      	str	r3, [r6, #0]
    1746:	4630      	mov	r0, r6
    1748:	f000 f8e0 	bl	190c <__malloc_unlock>
    174c:	e7e3      	b.n	1716 <_malloc_r+0x1e>
    174e:	6823      	ldr	r3, [r4, #0]
    1750:	1b5b      	subs	r3, r3, r5
    1752:	d417      	bmi.n	1784 <_malloc_r+0x8c>
    1754:	2b0b      	cmp	r3, #11
    1756:	d903      	bls.n	1760 <_malloc_r+0x68>
    1758:	6023      	str	r3, [r4, #0]
    175a:	441c      	add	r4, r3
    175c:	6025      	str	r5, [r4, #0]
    175e:	e004      	b.n	176a <_malloc_r+0x72>
    1760:	6863      	ldr	r3, [r4, #4]
    1762:	42a2      	cmp	r2, r4
    1764:	bf0c      	ite	eq
    1766:	600b      	streq	r3, [r1, #0]
    1768:	6053      	strne	r3, [r2, #4]
    176a:	4630      	mov	r0, r6
    176c:	f000 f8ce 	bl	190c <__malloc_unlock>
    1770:	f104 000b 	add.w	r0, r4, #11
    1774:	1d23      	adds	r3, r4, #4
    1776:	f020 0007 	bic.w	r0, r0, #7
    177a:	1ac2      	subs	r2, r0, r3
    177c:	d0cc      	beq.n	1718 <_malloc_r+0x20>
    177e:	1a1b      	subs	r3, r3, r0
    1780:	50a3      	str	r3, [r4, r2]
    1782:	e7c9      	b.n	1718 <_malloc_r+0x20>
    1784:	4622      	mov	r2, r4
    1786:	6864      	ldr	r4, [r4, #4]
    1788:	e7cc      	b.n	1724 <_malloc_r+0x2c>
    178a:	1cc4      	adds	r4, r0, #3
    178c:	f024 0403 	bic.w	r4, r4, #3
    1790:	42a0      	cmp	r0, r4
    1792:	d0e3      	beq.n	175c <_malloc_r+0x64>
    1794:	1a21      	subs	r1, r4, r0
    1796:	4630      	mov	r0, r6
    1798:	f000 f808 	bl	17ac <_sbrk_r>
    179c:	3001      	adds	r0, #1
    179e:	d1dd      	bne.n	175c <_malloc_r+0x64>
    17a0:	e7cf      	b.n	1742 <_malloc_r+0x4a>
    17a2:	bf00      	nop
    17a4:	20000084 	.word	0x20000084
    17a8:	20000088 	.word	0x20000088

000017ac <_sbrk_r>:
    17ac:	b538      	push	{r3, r4, r5, lr}
    17ae:	4c06      	ldr	r4, [pc, #24]	; (17c8 <_sbrk_r+0x1c>)
    17b0:	2300      	movs	r3, #0
    17b2:	4605      	mov	r5, r0
    17b4:	4608      	mov	r0, r1
    17b6:	6023      	str	r3, [r4, #0]
    17b8:	f7ff fae0 	bl	d7c <_sbrk>
    17bc:	1c43      	adds	r3, r0, #1
    17be:	d102      	bne.n	17c6 <_sbrk_r+0x1a>
    17c0:	6823      	ldr	r3, [r4, #0]
    17c2:	b103      	cbz	r3, 17c6 <_sbrk_r+0x1a>
    17c4:	602b      	str	r3, [r5, #0]
    17c6:	bd38      	pop	{r3, r4, r5, pc}
    17c8:	20000098 	.word	0x20000098

000017cc <__sread>:
    17cc:	b510      	push	{r4, lr}
    17ce:	460c      	mov	r4, r1
    17d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    17d4:	f000 f8a0 	bl	1918 <_read_r>
    17d8:	2800      	cmp	r0, #0
    17da:	bfab      	itete	ge
    17dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    17de:	89a3      	ldrhlt	r3, [r4, #12]
    17e0:	181b      	addge	r3, r3, r0
    17e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    17e6:	bfac      	ite	ge
    17e8:	6563      	strge	r3, [r4, #84]	; 0x54
    17ea:	81a3      	strhlt	r3, [r4, #12]
    17ec:	bd10      	pop	{r4, pc}

000017ee <__swrite>:
    17ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    17f2:	461f      	mov	r7, r3
    17f4:	898b      	ldrh	r3, [r1, #12]
    17f6:	05db      	lsls	r3, r3, #23
    17f8:	4605      	mov	r5, r0
    17fa:	460c      	mov	r4, r1
    17fc:	4616      	mov	r6, r2
    17fe:	d505      	bpl.n	180c <__swrite+0x1e>
    1800:	2302      	movs	r3, #2
    1802:	2200      	movs	r2, #0
    1804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    1808:	f000 f868 	bl	18dc <_lseek_r>
    180c:	89a3      	ldrh	r3, [r4, #12]
    180e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    1812:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    1816:	81a3      	strh	r3, [r4, #12]
    1818:	4632      	mov	r2, r6
    181a:	463b      	mov	r3, r7
    181c:	4628      	mov	r0, r5
    181e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    1822:	f000 b817 	b.w	1854 <_write_r>

00001826 <__sseek>:
    1826:	b510      	push	{r4, lr}
    1828:	460c      	mov	r4, r1
    182a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    182e:	f000 f855 	bl	18dc <_lseek_r>
    1832:	1c43      	adds	r3, r0, #1
    1834:	89a3      	ldrh	r3, [r4, #12]
    1836:	bf15      	itete	ne
    1838:	6560      	strne	r0, [r4, #84]	; 0x54
    183a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    183e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    1842:	81a3      	strheq	r3, [r4, #12]
    1844:	bf18      	it	ne
    1846:	81a3      	strhne	r3, [r4, #12]
    1848:	bd10      	pop	{r4, pc}

0000184a <__sclose>:
    184a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    184e:	f000 b813 	b.w	1878 <_close_r>
	...

00001854 <_write_r>:
    1854:	b538      	push	{r3, r4, r5, lr}
    1856:	4c07      	ldr	r4, [pc, #28]	; (1874 <_write_r+0x20>)
    1858:	4605      	mov	r5, r0
    185a:	4608      	mov	r0, r1
    185c:	4611      	mov	r1, r2
    185e:	2200      	movs	r2, #0
    1860:	6022      	str	r2, [r4, #0]
    1862:	461a      	mov	r2, r3
    1864:	f7ff fa78 	bl	d58 <_write>
    1868:	1c43      	adds	r3, r0, #1
    186a:	d102      	bne.n	1872 <_write_r+0x1e>
    186c:	6823      	ldr	r3, [r4, #0]
    186e:	b103      	cbz	r3, 1872 <_write_r+0x1e>
    1870:	602b      	str	r3, [r5, #0]
    1872:	bd38      	pop	{r3, r4, r5, pc}
    1874:	20000098 	.word	0x20000098

00001878 <_close_r>:
    1878:	b538      	push	{r3, r4, r5, lr}
    187a:	4c06      	ldr	r4, [pc, #24]	; (1894 <_close_r+0x1c>)
    187c:	2300      	movs	r3, #0
    187e:	4605      	mov	r5, r0
    1880:	4608      	mov	r0, r1
    1882:	6023      	str	r3, [r4, #0]
    1884:	f7ff fa8c 	bl	da0 <_close>
    1888:	1c43      	adds	r3, r0, #1
    188a:	d102      	bne.n	1892 <_close_r+0x1a>
    188c:	6823      	ldr	r3, [r4, #0]
    188e:	b103      	cbz	r3, 1892 <_close_r+0x1a>
    1890:	602b      	str	r3, [r5, #0]
    1892:	bd38      	pop	{r3, r4, r5, pc}
    1894:	20000098 	.word	0x20000098

00001898 <_fstat_r>:
    1898:	b538      	push	{r3, r4, r5, lr}
    189a:	4c07      	ldr	r4, [pc, #28]	; (18b8 <_fstat_r+0x20>)
    189c:	2300      	movs	r3, #0
    189e:	4605      	mov	r5, r0
    18a0:	4608      	mov	r0, r1
    18a2:	4611      	mov	r1, r2
    18a4:	6023      	str	r3, [r4, #0]
    18a6:	f7ff fa7e 	bl	da6 <_fstat>
    18aa:	1c43      	adds	r3, r0, #1
    18ac:	d102      	bne.n	18b4 <_fstat_r+0x1c>
    18ae:	6823      	ldr	r3, [r4, #0]
    18b0:	b103      	cbz	r3, 18b4 <_fstat_r+0x1c>
    18b2:	602b      	str	r3, [r5, #0]
    18b4:	bd38      	pop	{r3, r4, r5, pc}
    18b6:	bf00      	nop
    18b8:	20000098 	.word	0x20000098

000018bc <_isatty_r>:
    18bc:	b538      	push	{r3, r4, r5, lr}
    18be:	4c06      	ldr	r4, [pc, #24]	; (18d8 <_isatty_r+0x1c>)
    18c0:	2300      	movs	r3, #0
    18c2:	4605      	mov	r5, r0
    18c4:	4608      	mov	r0, r1
    18c6:	6023      	str	r3, [r4, #0]
    18c8:	f7ff fa72 	bl	db0 <_isatty>
    18cc:	1c43      	adds	r3, r0, #1
    18ce:	d102      	bne.n	18d6 <_isatty_r+0x1a>
    18d0:	6823      	ldr	r3, [r4, #0]
    18d2:	b103      	cbz	r3, 18d6 <_isatty_r+0x1a>
    18d4:	602b      	str	r3, [r5, #0]
    18d6:	bd38      	pop	{r3, r4, r5, pc}
    18d8:	20000098 	.word	0x20000098

000018dc <_lseek_r>:
    18dc:	b538      	push	{r3, r4, r5, lr}
    18de:	4c07      	ldr	r4, [pc, #28]	; (18fc <_lseek_r+0x20>)
    18e0:	4605      	mov	r5, r0
    18e2:	4608      	mov	r0, r1
    18e4:	4611      	mov	r1, r2
    18e6:	2200      	movs	r2, #0
    18e8:	6022      	str	r2, [r4, #0]
    18ea:	461a      	mov	r2, r3
    18ec:	f7ff fa62 	bl	db4 <_lseek>
    18f0:	1c43      	adds	r3, r0, #1
    18f2:	d102      	bne.n	18fa <_lseek_r+0x1e>
    18f4:	6823      	ldr	r3, [r4, #0]
    18f6:	b103      	cbz	r3, 18fa <_lseek_r+0x1e>
    18f8:	602b      	str	r3, [r5, #0]
    18fa:	bd38      	pop	{r3, r4, r5, pc}
    18fc:	20000098 	.word	0x20000098

00001900 <__malloc_lock>:
    1900:	4801      	ldr	r0, [pc, #4]	; (1908 <__malloc_lock+0x8>)
    1902:	f7ff be3c 	b.w	157e <__retarget_lock_acquire_recursive>
    1906:	bf00      	nop
    1908:	20000090 	.word	0x20000090

0000190c <__malloc_unlock>:
    190c:	4801      	ldr	r0, [pc, #4]	; (1914 <__malloc_unlock+0x8>)
    190e:	f7ff be37 	b.w	1580 <__retarget_lock_release_recursive>
    1912:	bf00      	nop
    1914:	20000090 	.word	0x20000090

00001918 <_read_r>:
    1918:	b538      	push	{r3, r4, r5, lr}
    191a:	4c07      	ldr	r4, [pc, #28]	; (1938 <_read_r+0x20>)
    191c:	4605      	mov	r5, r0
    191e:	4608      	mov	r0, r1
    1920:	4611      	mov	r1, r2
    1922:	2200      	movs	r2, #0
    1924:	6022      	str	r2, [r4, #0]
    1926:	461a      	mov	r2, r3
    1928:	f7ff fa06 	bl	d38 <_read>
    192c:	1c43      	adds	r3, r0, #1
    192e:	d102      	bne.n	1936 <_read_r+0x1e>
    1930:	6823      	ldr	r3, [r4, #0]
    1932:	b103      	cbz	r3, 1936 <_read_r+0x1e>
    1934:	602b      	str	r3, [r5, #0]
    1936:	bd38      	pop	{r3, r4, r5, pc}
    1938:	20000098 	.word	0x20000098
    193c:	2d2d0a0d 	.word	0x2d2d0a0d
    1940:	4d415320 	.word	0x4d415320
    1944:	20343545 	.word	0x20343545
    1948:	616c7058 	.word	0x616c7058
    194c:	64656e69 	.word	0x64656e69
    1950:	6f725020 	.word	0x6f725020
    1954:	6f6f6220 	.word	0x6f6f6220
    1958:	78652074 	.word	0x78652074
    195c:	6c706d61 	.word	0x6c706d61
    1960:	2d2d2065 	.word	0x2d2d2065
    1964:	0000000d 	.word	0x0000000d
    1968:	6c697542 	.word	0x6c697542
    196c:	37312074 	.word	0x37312074
    1970:	3a30323a 	.word	0x3a30323a
    1974:	61203132 	.word	0x61203132
    1978:	614d2074 	.word	0x614d2074
    197c:	38322079 	.word	0x38322079
    1980:	32303220 	.word	0x32303220
    1984:	0d0a0d30 	.word	0x0d0a0d30
    1988:	00000000 	.word	0x00000000
    198c:	434d564e 	.word	0x434d564e
    1990:	204c5254 	.word	0x204c5254
    1994:	73202d2d 	.word	0x73202d2d
    1998:	77207465 	.word	0x77207465
    199c:	20746961 	.word	0x20746961
    19a0:	74617473 	.word	0x74617473
    19a4:	74207365 	.word	0x74207365
    19a8:	616d206f 	.word	0x616d206f
    19ac:	6c61756e 	.word	0x6c61756e
    19b0:	646e6120 	.word	0x646e6120
    19b4:	57203520 	.word	0x57203520
    19b8:	000d2e53 	.word	0x000d2e53
    19bc:	4343534f 	.word	0x4343534f
    19c0:	204c5254 	.word	0x204c5254
    19c4:	58202d2d 	.word	0x58202d2d
    19c8:	3143534f 	.word	0x3143534f
    19cc:	32312820 	.word	0x32312820
    19d0:	7a484d20 	.word	0x7a484d20
    19d4:	75722029 	.word	0x75722029
    19d8:	6e696e6e 	.word	0x6e696e6e
    19dc:	000d2e67 	.word	0x000d2e67
    19e0:	4b4c4347 	.word	0x4b4c4347
    19e4:	20202030 	.word	0x20202030
    19e8:	63202d2d 	.word	0x63202d2d
    19ec:	656e6e6f 	.word	0x656e6e6f
    19f0:	64657463 	.word	0x64657463
    19f4:	206f7420 	.word	0x206f7420
    19f8:	4c4c5044 	.word	0x4c4c5044
    19fc:	31282030 	.word	0x31282030
    1a00:	4d203032 	.word	0x4d203032
    1a04:	2e297a48 	.word	0x2e297a48
    1a08:	0000000d 	.word	0x0000000d
    1a0c:	4b4c4347 	.word	0x4b4c4347
    1a10:	20202031 	.word	0x20202031
    1a14:	63202d2d 	.word	0x63202d2d
    1a18:	656e6e6f 	.word	0x656e6e6f
    1a1c:	64657463 	.word	0x64657463
    1a20:	206f7420 	.word	0x206f7420
    1a24:	4c4c5044 	.word	0x4c4c5044
    1a28:	32282031 	.word	0x32282031
    1a2c:	4d203030 	.word	0x4d203030
    1a30:	2e297a48 	.word	0x2e297a48
    1a34:	0000000d 	.word	0x0000000d
    1a38:	4b4c4347 	.word	0x4b4c4347
    1a3c:	20202032 	.word	0x20202032
    1a40:	63202d2d 	.word	0x63202d2d
    1a44:	656e6e6f 	.word	0x656e6e6f
    1a48:	64657463 	.word	0x64657463
    1a4c:	206f7420 	.word	0x206f7420
    1a50:	4c4c5044 	.word	0x4c4c5044
    1a54:	32282031 	.word	0x32282031
    1a58:	4d203030 	.word	0x4d203030
    1a5c:	2c297a48 	.word	0x2c297a48
    1a60:	76696420 	.word	0x76696420
    1a64:	72656469 	.word	0x72656469
    1a68:	30303220 	.word	0x30303220
    1a6c:	756f202c 	.word	0x756f202c
    1a70:	74757074 	.word	0x74757074
    1a74:	616e6520 	.word	0x616e6520
    1a78:	64656c62 	.word	0x64656c62
    1a7c:	42502820 	.word	0x42502820
    1a80:	2e293531 	.word	0x2e293531
    1a84:	0000000d 	.word	0x0000000d
    1a88:	4b4c4347 	.word	0x4b4c4347
    1a8c:	20202033 	.word	0x20202033
    1a90:	63202d2d 	.word	0x63202d2d
    1a94:	656e6e6f 	.word	0x656e6e6f
    1a98:	64657463 	.word	0x64657463
    1a9c:	206f7420 	.word	0x206f7420
    1aa0:	43534f58 	.word	0x43534f58
    1aa4:	20282031 	.word	0x20282031
    1aa8:	4d203231 	.word	0x4d203231
    1aac:	2e297a48 	.word	0x2e297a48
    1ab0:	0000000d 	.word	0x0000000d
    1ab4:	4b4c4347 	.word	0x4b4c4347
    1ab8:	20202034 	.word	0x20202034
    1abc:	63202d2d 	.word	0x63202d2d
    1ac0:	656e6e6f 	.word	0x656e6e6f
    1ac4:	64657463 	.word	0x64657463
    1ac8:	206f7420 	.word	0x206f7420
    1acc:	5543534f 	.word	0x5543534f
    1ad0:	3233504c 	.word	0x3233504c
    1ad4:	3328204b 	.word	0x3328204b
    1ad8:	36372e32 	.word	0x36372e32
    1adc:	486b2038 	.word	0x486b2038
    1ae0:	0d2e297a 	.word	0x0d2e297a
    1ae4:	00000000 	.word	0x00000000
    1ae8:	4f495047 	.word	0x4f495047
    1aec:	20202020 	.word	0x20202020
    1af0:	63202d2d 	.word	0x63202d2d
    1af4:	69666e6f 	.word	0x69666e6f
    1af8:	65727567 	.word	0x65727567
    1afc:	4d502064 	.word	0x4d502064
    1b00:	66205855 	.word	0x66205855
    1b04:	4720726f 	.word	0x4720726f
    1b08:	314b4c43 	.word	0x314b4c43
    1b0c:	4354202c 	.word	0x4354202c
    1b10:	4f572037 	.word	0x4f572037
    1b14:	6e612030 	.word	0x6e612030
    1b18:	4f572064 	.word	0x4f572064
    1b1c:	55202c31 	.word	0x55202c31
    1b20:	20545241 	.word	0x20545241
    1b24:	61205852 	.word	0x61205852
    1b28:	5420646e 	.word	0x5420646e
    1b2c:	000d2e58 	.word	0x000d2e58
    1b30:	54524155 	.word	0x54524155
    1b34:	20202020 	.word	0x20202020
    1b38:	69202d2d 	.word	0x69202d2d
    1b3c:	6974696e 	.word	0x6974696e
    1b40:	7a696c61 	.word	0x7a696c61
    1b44:	74206465 	.word	0x74206465
    1b48:	3131206f 	.word	0x3131206f
    1b4c:	30303235 	.word	0x30303235
    1b50:	75616220 	.word	0x75616220
    1b54:	38202c64 	.word	0x38202c64
    1b58:	0d2e314e 	.word	0x0d2e314e
    1b5c:	00000000 	.word	0x00000000
    1b60:	2d2d0a0d 	.word	0x2d2d0a0d
    1b64:	6e694620 	.word	0x6e694620
    1b68:	65687369 	.word	0x65687369
    1b6c:	6e692064 	.word	0x6e692064
    1b70:	61697469 	.word	0x61697469
    1b74:	617a696c 	.word	0x617a696c
    1b78:	6e6f6974 	.word	0x6e6f6974
    1b7c:	7473202c 	.word	0x7473202c
    1b80:	69747261 	.word	0x69747261
    1b84:	6120676e 	.word	0x6120676e
    1b88:	0d2e7070 	.word	0x0d2e7070
    1b8c:	00000000 	.word	0x00000000
    1b90:	204c4343 	.word	0x204c4343
    1b94:	20202020 	.word	0x20202020
    1b98:	75202d2d 	.word	0x75202d2d
    1b9c:	73616d6e 	.word	0x73616d6e
    1ba0:	4343206b 	.word	0x4343206b
    1ba4:	6f74204c 	.word	0x6f74204c
    1ba8:	616e6520 	.word	0x616e6520
    1bac:	20656c62 	.word	0x20656c62
    1bb0:	65746e69 	.word	0x65746e69
    1bb4:	63616672 	.word	0x63616672
    1bb8:	6e6f2065 	.word	0x6e6f2065
    1bbc:	42504120 	.word	0x42504120
    1bc0:	000d2e43 	.word	0x000d2e43
    1bc4:	204c4343 	.word	0x204c4343
    1bc8:	20202020 	.word	0x20202020
    1bcc:	63202d2d 	.word	0x63202d2d
    1bd0:	656e6e6f 	.word	0x656e6e6f
    1bd4:	47207463 	.word	0x47207463
    1bd8:	334b4c43 	.word	0x334b4c43
    1bdc:	206f7420 	.word	0x206f7420
    1be0:	2e4c4343 	.word	0x2e4c4343
    1be4:	0000000d 	.word	0x0000000d
    1be8:	204c4343 	.word	0x204c4343
    1bec:	20202020 	.word	0x20202020
    1bf0:	63202d2d 	.word	0x63202d2d
    1bf4:	69666e6f 	.word	0x69666e6f
    1bf8:	65727567 	.word	0x65727567
    1bfc:	706e6920 	.word	0x706e6920
    1c00:	6f207475 	.word	0x6f207475
    1c04:	554c2066 	.word	0x554c2066
    1c08:	5d305b54 	.word	0x5d305b54
    1c0c:	4e49202c 	.word	0x4e49202c
    1c10:	205d305b 	.word	0x205d305b
    1c14:	49207369 	.word	0x49207369
    1c18:	000d2e4f 	.word	0x000d2e4f
    1c1c:	204c4343 	.word	0x204c4343
    1c20:	20202020 	.word	0x20202020
    1c24:	63202d2d 	.word	0x63202d2d
    1c28:	69666e6f 	.word	0x69666e6f
    1c2c:	65727567 	.word	0x65727567
    1c30:	646e6120 	.word	0x646e6120
    1c34:	616e6520 	.word	0x616e6520
    1c38:	20656c62 	.word	0x20656c62
    1c3c:	5b54554c 	.word	0x5b54554c
    1c40:	202c5d30 	.word	0x202c5d30
    1c44:	65766e69 	.word	0x65766e69
    1c48:	6e697472 	.word	0x6e697472
    1c4c:	6e692067 	.word	0x6e692067
    1c50:	2e747570 	.word	0x2e747570
    1c54:	0000000d 	.word	0x0000000d
    1c58:	204c4343 	.word	0x204c4343
    1c5c:	20202020 	.word	0x20202020
    1c60:	63202d2d 	.word	0x63202d2d
    1c64:	69666e6f 	.word	0x69666e6f
    1c68:	65727567 	.word	0x65727567
    1c6c:	706e6920 	.word	0x706e6920
    1c70:	6f207475 	.word	0x6f207475
    1c74:	554c2066 	.word	0x554c2066
    1c78:	5d305b54 	.word	0x5d305b54
    1c7c:	4e49202c 	.word	0x4e49202c
    1c80:	205d305b 	.word	0x205d305b
    1c84:	53207369 	.word	0x53207369
    1c88:	4f435245 	.word	0x4f435245
    1c8c:	202c324d 	.word	0x202c324d
    1c90:	20646150 	.word	0x20646150
    1c94:	000d2e30 	.word	0x000d2e30
    1c98:	204c4343 	.word	0x204c4343
    1c9c:	20202020 	.word	0x20202020
    1ca0:	65202d2d 	.word	0x65202d2d
    1ca4:	6c62616e 	.word	0x6c62616e
    1ca8:	43432065 	.word	0x43432065
    1cac:	000d2e4c 	.word	0x000d2e4c
    1cb0:	20434144 	.word	0x20434144
    1cb4:	20202020 	.word	0x20202020
    1cb8:	75202d2d 	.word	0x75202d2d
    1cbc:	73616d6e 	.word	0x73616d6e
    1cc0:	4144206b 	.word	0x4144206b
    1cc4:	6f742043 	.word	0x6f742043
    1cc8:	616e6520 	.word	0x616e6520
    1ccc:	20656c62 	.word	0x20656c62
    1cd0:	65746e69 	.word	0x65746e69
    1cd4:	63616672 	.word	0x63616672
    1cd8:	6e6f2065 	.word	0x6e6f2065
    1cdc:	42504120 	.word	0x42504120
    1ce0:	000d2e44 	.word	0x000d2e44
    1ce4:	20434144 	.word	0x20434144
    1ce8:	20202020 	.word	0x20202020
    1cec:	63202d2d 	.word	0x63202d2d
    1cf0:	656e6e6f 	.word	0x656e6e6f
    1cf4:	47207463 	.word	0x47207463
    1cf8:	334b434c 	.word	0x334b434c
    1cfc:	206f7420 	.word	0x206f7420
    1d00:	2e434144 	.word	0x2e434144
    1d04:	0000000d 	.word	0x0000000d
    1d08:	20434144 	.word	0x20434144
    1d0c:	20202020 	.word	0x20202020
    1d10:	69202d2d 	.word	0x69202d2d
    1d14:	65757373 	.word	0x65757373
    1d18:	73206120 	.word	0x73206120
    1d1c:	7774666f 	.word	0x7774666f
    1d20:	20657261 	.word	0x20657261
    1d24:	65736572 	.word	0x65736572
    1d28:	000d2e74 	.word	0x000d2e74
    1d2c:	20434144 	.word	0x20434144
    1d30:	20202020 	.word	0x20202020
    1d34:	73202d2d 	.word	0x73202d2d
    1d38:	63656c65 	.word	0x63656c65
    1d3c:	6e752074 	.word	0x6e752074
    1d40:	66667562 	.word	0x66667562
    1d44:	64657265 	.word	0x64657265
    1d48:	74786520 	.word	0x74786520
    1d4c:	616e7265 	.word	0x616e7265
    1d50:	6572206c 	.word	0x6572206c
    1d54:	65726566 	.word	0x65726566
    1d58:	2e65636e 	.word	0x2e65636e
    1d5c:	0000000d 	.word	0x0000000d
    1d60:	20434144 	.word	0x20434144
    1d64:	20202020 	.word	0x20202020
    1d68:	63202d2d 	.word	0x63202d2d
    1d6c:	65727275 	.word	0x65727275
    1d70:	6320746e 	.word	0x6320746e
    1d74:	72746e6f 	.word	0x72746e6f
    1d78:	74206c6f 	.word	0x74206c6f
    1d7c:	4d31206f 	.word	0x4d31206f
    1d80:	20737042 	.word	0x20737042
    1d84:	65646f6d 	.word	0x65646f6d
    1d88:	00000d2e 	.word	0x00000d2e
    1d8c:	20434144 	.word	0x20434144
    1d90:	20202020 	.word	0x20202020
    1d94:	45202d2d 	.word	0x45202d2d
    1d98:	6c62616e 	.word	0x6c62616e
    1d9c:	41442065 	.word	0x41442065
    1da0:	77203043 	.word	0x77203043
    1da4:	20687469 	.word	0x20687469
    1da8:	6f747561 	.word	0x6f747561
    1dac:	66657220 	.word	0x66657220
    1db0:	68736572 	.word	0x68736572
    1db4:	65766520 	.word	0x65766520
    1db8:	33207972 	.word	0x33207972
    1dbc:	2e737530 	.word	0x2e737530
    1dc0:	0000000d 	.word	0x0000000d
    1dc4:	20434144 	.word	0x20434144
    1dc8:	20202020 	.word	0x20202020
    1dcc:	45202d2d 	.word	0x45202d2d
    1dd0:	6c62616e 	.word	0x6c62616e
    1dd4:	41442065 	.word	0x41442065
    1dd8:	6f632043 	.word	0x6f632043
    1ddc:	6f72746e 	.word	0x6f72746e
    1de0:	72656c6c 	.word	0x72656c6c
    1de4:	00000d2e 	.word	0x00000d2e
    1de8:	4c4c5044 	.word	0x4c4c5044
    1dec:	20202030 	.word	0x20202030
    1df0:	73202d2d 	.word	0x73202d2d
    1df4:	72207465 	.word	0x72207465
    1df8:	72656665 	.word	0x72656665
    1dfc:	65636e65 	.word	0x65636e65
    1e00:	206f7420 	.word	0x206f7420
    1e04:	43534f58 	.word	0x43534f58
    1e08:	6e612031 	.word	0x6e612031
    1e0c:	69642064 	.word	0x69642064
    1e10:	65646976 	.word	0x65646976
    1e14:	20796220 	.word	0x20796220
    1e18:	000d2e34 	.word	0x000d2e34
    1e1c:	4c4c5044 	.word	0x4c4c5044
    1e20:	20202030 	.word	0x20202030
    1e24:	73202d2d 	.word	0x73202d2d
    1e28:	6d207465 	.word	0x6d207465
    1e2c:	69746c75 	.word	0x69746c75
    1e30:	65696c70 	.word	0x65696c70
    1e34:	6f742072 	.word	0x6f742072
    1e38:	2e303420 	.word	0x2e303420
    1e3c:	0000000d 	.word	0x0000000d
    1e40:	4c4c5044 	.word	0x4c4c5044
    1e44:	20202030 	.word	0x20202030
    1e48:	65202d2d 	.word	0x65202d2d
    1e4c:	6c62616e 	.word	0x6c62616e
    1e50:	50442065 	.word	0x50442065
    1e54:	20304c4c 	.word	0x20304c4c
    1e58:	20646e61 	.word	0x20646e61
    1e5c:	74696177 	.word	0x74696177
    1e60:	726f6620 	.word	0x726f6620
    1e64:	636f6c20 	.word	0x636f6c20
    1e68:	000d2e6b 	.word	0x000d2e6b
    1e6c:	4c4c5044 	.word	0x4c4c5044
    1e70:	20202031 	.word	0x20202031
    1e74:	73202d2d 	.word	0x73202d2d
    1e78:	72207465 	.word	0x72207465
    1e7c:	72656665 	.word	0x72656665
    1e80:	65636e65 	.word	0x65636e65
    1e84:	206f7420 	.word	0x206f7420
    1e88:	43534f58 	.word	0x43534f58
    1e8c:	6e612031 	.word	0x6e612031
    1e90:	69642064 	.word	0x69642064
    1e94:	65646976 	.word	0x65646976
    1e98:	20796220 	.word	0x20796220
    1e9c:	000d2e36 	.word	0x000d2e36
    1ea0:	4c4c5044 	.word	0x4c4c5044
    1ea4:	20202031 	.word	0x20202031
    1ea8:	73202d2d 	.word	0x73202d2d
    1eac:	6d207465 	.word	0x6d207465
    1eb0:	69746c75 	.word	0x69746c75
    1eb4:	65696c70 	.word	0x65696c70
    1eb8:	6f742072 	.word	0x6f742072
    1ebc:	30303120 	.word	0x30303120
    1ec0:	00000d2e 	.word	0x00000d2e
    1ec4:	4c4c5044 	.word	0x4c4c5044
    1ec8:	20202031 	.word	0x20202031
    1ecc:	65202d2d 	.word	0x65202d2d
    1ed0:	6c62616e 	.word	0x6c62616e
    1ed4:	50442065 	.word	0x50442065
    1ed8:	20314c4c 	.word	0x20314c4c
    1edc:	20646e61 	.word	0x20646e61
    1ee0:	74696177 	.word	0x74696177
    1ee4:	726f6620 	.word	0x726f6620
    1ee8:	636f6c20 	.word	0x636f6c20
    1eec:	000d2e6b 	.word	0x000d2e6b
    1ef0:	20515249 	.word	0x20515249
    1ef4:	20202020 	.word	0x20202020
    1ef8:	73202d2d 	.word	0x73202d2d
    1efc:	52207465 	.word	0x52207465
    1f00:	495f4354 	.word	0x495f4354
    1f04:	74205152 	.word	0x74205152
    1f08:	7270206f 	.word	0x7270206f
    1f0c:	69726f69 	.word	0x69726f69
    1f10:	33207974 	.word	0x33207974
    1f14:	00000d2e 	.word	0x00000d2e
    1f18:	20515249 	.word	0x20515249
    1f1c:	20202020 	.word	0x20202020
    1f20:	65202d2d 	.word	0x65202d2d
    1f24:	6c62616e 	.word	0x6c62616e
    1f28:	54522065 	.word	0x54522065
    1f2c:	52495f43 	.word	0x52495f43
    1f30:	000d2e51 	.word	0x000d2e51
    1f34:	20515249 	.word	0x20515249
    1f38:	20202020 	.word	0x20202020
    1f3c:	73202d2d 	.word	0x73202d2d
    1f40:	41207465 	.word	0x41207465
    1f44:	5f314344 	.word	0x5f314344
    1f48:	52495f30 	.word	0x52495f30
    1f4c:	6f742051 	.word	0x6f742051
    1f50:	69727020 	.word	0x69727020
    1f54:	7469726f 	.word	0x7469726f
    1f58:	2e332079 	.word	0x2e332079
    1f5c:	0000000d 	.word	0x0000000d
    1f60:	20515249 	.word	0x20515249
    1f64:	20202020 	.word	0x20202020
    1f68:	65202d2d 	.word	0x65202d2d
    1f6c:	6c62616e 	.word	0x6c62616e
    1f70:	44412065 	.word	0x44412065
    1f74:	305f3143 	.word	0x305f3143
    1f78:	5152495f 	.word	0x5152495f
    1f7c:	00000d2e 	.word	0x00000d2e
    1f80:	20515249 	.word	0x20515249
    1f84:	20202020 	.word	0x20202020
    1f88:	73202d2d 	.word	0x73202d2d
    1f8c:	41207465 	.word	0x41207465
    1f90:	5f314344 	.word	0x5f314344
    1f94:	52495f31 	.word	0x52495f31
    1f98:	6f742051 	.word	0x6f742051
    1f9c:	69727020 	.word	0x69727020
    1fa0:	7469726f 	.word	0x7469726f
    1fa4:	2e332079 	.word	0x2e332079
    1fa8:	0000000d 	.word	0x0000000d
    1fac:	20515249 	.word	0x20515249
    1fb0:	20202020 	.word	0x20202020
    1fb4:	65202d2d 	.word	0x65202d2d
    1fb8:	6c62616e 	.word	0x6c62616e
    1fbc:	44412065 	.word	0x44412065
    1fc0:	315f3143 	.word	0x315f3143
    1fc4:	5152495f 	.word	0x5152495f
    1fc8:	00000d2e 	.word	0x00000d2e
    1fcc:	20515249 	.word	0x20515249
    1fd0:	20202020 	.word	0x20202020
    1fd4:	73202d2d 	.word	0x73202d2d
    1fd8:	41207465 	.word	0x41207465
    1fdc:	52495f43 	.word	0x52495f43
    1fe0:	6f742051 	.word	0x6f742051
    1fe4:	69727020 	.word	0x69727020
    1fe8:	7469726f 	.word	0x7469726f
    1fec:	2e332079 	.word	0x2e332079
    1ff0:	0000000d 	.word	0x0000000d
    1ff4:	20515249 	.word	0x20515249
    1ff8:	20202020 	.word	0x20202020
    1ffc:	65202d2d 	.word	0x65202d2d
    2000:	6c62616e 	.word	0x6c62616e
    2004:	43412065 	.word	0x43412065
    2008:	5152495f 	.word	0x5152495f
    200c:	00000d2e 	.word	0x00000d2e
    2010:	20204d50 	.word	0x20204d50
    2014:	20202020 	.word	0x20202020
    2018:	63202d2d 	.word	0x63202d2d
    201c:	69666e6f 	.word	0x69666e6f
    2020:	65727567 	.word	0x65727567
    2024:	656c7320 	.word	0x656c7320
    2028:	6d207065 	.word	0x6d207065
    202c:	2065646f 	.word	0x2065646f
    2030:	53206f74 	.word	0x53206f74
    2034:	444e4154 	.word	0x444e4154
    2038:	0d2e5942 	.word	0x0d2e5942
    203c:	00000000 	.word	0x00000000
    2040:	20204d50 	.word	0x20204d50
    2044:	20202020 	.word	0x20202020
    2048:	73202d2d 	.word	0x73202d2d
    204c:	7065656c 	.word	0x7065656c
    2050:	646f6d20 	.word	0x646f6d20
    2054:	65722065 	.word	0x65722065
    2058:	2e796461 	.word	0x2e796461
    205c:	0000000d 	.word	0x0000000d
    2060:	204d5750 	.word	0x204d5750
    2064:	20202020 	.word	0x20202020
    2068:	75202d2d 	.word	0x75202d2d
    206c:	73616d6e 	.word	0x73616d6e
    2070:	4354206b 	.word	0x4354206b
    2074:	6f742037 	.word	0x6f742037
    2078:	616e6520 	.word	0x616e6520
    207c:	20656c62 	.word	0x20656c62
    2080:	65746e69 	.word	0x65746e69
    2084:	63616672 	.word	0x63616672
    2088:	6e6f2065 	.word	0x6e6f2065
    208c:	42504120 	.word	0x42504120
    2090:	000d2e44 	.word	0x000d2e44
    2094:	204d5750 	.word	0x204d5750
    2098:	20202020 	.word	0x20202020
    209c:	63202d2d 	.word	0x63202d2d
    20a0:	656e6e6f 	.word	0x656e6e6f
    20a4:	47207463 	.word	0x47207463
    20a8:	324b434c 	.word	0x324b434c
    20ac:	206f7420 	.word	0x206f7420
    20b0:	2e374354 	.word	0x2e374354
    20b4:	0000000d 	.word	0x0000000d
    20b8:	204d5750 	.word	0x204d5750
    20bc:	20202020 	.word	0x20202020
    20c0:	69202d2d 	.word	0x69202d2d
    20c4:	65757373 	.word	0x65757373
    20c8:	73206120 	.word	0x73206120
    20cc:	7774666f 	.word	0x7774666f
    20d0:	20657261 	.word	0x20657261
    20d4:	65736572 	.word	0x65736572
    20d8:	000d2e74 	.word	0x000d2e74
    20dc:	204d5750 	.word	0x204d5750
    20e0:	20202020 	.word	0x20202020
    20e4:	73202d2d 	.word	0x73202d2d
    20e8:	6d207465 	.word	0x6d207465
    20ec:	2065646f 	.word	0x2065646f
    20f0:	6e206f74 	.word	0x6e206f74
    20f4:	616d726f 	.word	0x616d726f
    20f8:	5750206c 	.word	0x5750206c
    20fc:	6e69204d 	.word	0x6e69204d
    2100:	2d363120 	.word	0x2d363120
    2104:	20746962 	.word	0x20746962
    2108:	6e756f63 	.word	0x6e756f63
    210c:	20726574 	.word	0x20726574
    2110:	65646f6d 	.word	0x65646f6d
    2114:	00000d2e 	.word	0x00000d2e
    2118:	204d5750 	.word	0x204d5750
    211c:	20202020 	.word	0x20202020
    2120:	73202d2d 	.word	0x73202d2d
    2124:	69207465 	.word	0x69207465
    2128:	6974696e 	.word	0x6974696e
    212c:	64206c61 	.word	0x64206c61
    2130:	20797475 	.word	0x20797475
    2134:	6c637963 	.word	0x6c637963
    2138:	66207365 	.word	0x66207365
    213c:	4320726f 	.word	0x4320726f
    2140:	61203043 	.word	0x61203043
    2144:	4320646e 	.word	0x4320646e
    2148:	0d2e3143 	.word	0x0d2e3143
    214c:	00000000 	.word	0x00000000
    2150:	204d5750 	.word	0x204d5750
    2154:	20202020 	.word	0x20202020
    2158:	65202d2d 	.word	0x65202d2d
    215c:	6c62616e 	.word	0x6c62616e
    2160:	43542065 	.word	0x43542065
    2164:	6f6d2037 	.word	0x6f6d2037
    2168:	656c7564 	.word	0x656c7564
    216c:	00000d2e 	.word	0x00000d2e
    2170:	3343534f 	.word	0x3343534f
    2174:	20204b32 	.word	0x20204b32
    2178:	73202d2d 	.word	0x73202d2d
    217c:	63656c65 	.word	0x63656c65
    2180:	6e692074 	.word	0x6e692074
    2184:	6e726574 	.word	0x6e726574
    2188:	33206c61 	.word	0x33206c61
    218c:	7a486b32 	.word	0x7a486b32
    2190:	63736f20 	.word	0x63736f20
    2194:	616c6c69 	.word	0x616c6c69
    2198:	20726f74 	.word	0x20726f74
    219c:	73207361 	.word	0x73207361
    21a0:	6372756f 	.word	0x6372756f
    21a4:	000d2e65 	.word	0x000d2e65
    21a8:	20435452 	.word	0x20435452
    21ac:	20202020 	.word	0x20202020
    21b0:	73202d2d 	.word	0x73202d2d
    21b4:	7774666f 	.word	0x7774666f
    21b8:	20657261 	.word	0x20657261
    21bc:	65736572 	.word	0x65736572
    21c0:	000d2e74 	.word	0x000d2e74
    21c4:	20435452 	.word	0x20435452
    21c8:	20202020 	.word	0x20202020
    21cc:	65202d2d 	.word	0x65202d2d
    21d0:	6c62616e 	.word	0x6c62616e
    21d4:	65722065 	.word	0x65722065
    21d8:	73206461 	.word	0x73206461
    21dc:	68636e79 	.word	0x68636e79
    21e0:	696e6f72 	.word	0x696e6f72
    21e4:	6974617a 	.word	0x6974617a
    21e8:	66206e6f 	.word	0x66206e6f
    21ec:	6320726f 	.word	0x6320726f
    21f0:	746e756f 	.word	0x746e756f
    21f4:	67657220 	.word	0x67657220
    21f8:	65747369 	.word	0x65747369
    21fc:	000d2e72 	.word	0x000d2e72
    2200:	20435452 	.word	0x20435452
    2204:	20202020 	.word	0x20202020
    2208:	73202d2d 	.word	0x73202d2d
    220c:	64207465 	.word	0x64207465
    2210:	64697669 	.word	0x64697669
    2214:	74207265 	.word	0x74207265
    2218:	2e31206f 	.word	0x2e31206f
    221c:	0000000d 	.word	0x0000000d
    2220:	20435452 	.word	0x20435452
    2224:	20202020 	.word	0x20202020
    2228:	65202d2d 	.word	0x65202d2d
    222c:	6c62616e 	.word	0x6c62616e
    2230:	6c632065 	.word	0x6c632065
    2234:	20726165 	.word	0x20726165
    2238:	6d206e6f 	.word	0x6d206e6f
    223c:	68637461 	.word	0x68637461
    2240:	00000d2e 	.word	0x00000d2e
    2244:	20435452 	.word	0x20435452
    2248:	20202020 	.word	0x20202020
    224c:	65202d2d 	.word	0x65202d2d
    2250:	6c62616e 	.word	0x6c62616e
    2254:	76652065 	.word	0x76652065
    2258:	20746e65 	.word	0x20746e65
    225c:	30504d43 	.word	0x30504d43
    2260:	6977202c 	.word	0x6977202c
    2264:	67206c6c 	.word	0x67206c6c
    2268:	72656e65 	.word	0x72656e65
    226c:	20657461 	.word	0x20657461
    2270:	6e657665 	.word	0x6e657665
    2274:	6e6f2074 	.word	0x6e6f2074
    2278:	74616d20 	.word	0x74616d20
    227c:	0d2e6863 	.word	0x0d2e6863
    2280:	00000000 	.word	0x00000000
    2284:	20435452 	.word	0x20435452
    2288:	20202020 	.word	0x20202020
    228c:	73202d2d 	.word	0x73202d2d
    2290:	63207465 	.word	0x63207465
    2294:	61706d6f 	.word	0x61706d6f
    2298:	76206572 	.word	0x76206572
    229c:	65756c61 	.word	0x65756c61
    22a0:	206f7420 	.word	0x206f7420
    22a4:	36373233 	.word	0x36373233
    22a8:	000d2e38 	.word	0x000d2e38
    22ac:	20435452 	.word	0x20435452
    22b0:	20202020 	.word	0x20202020
    22b4:	65202d2d 	.word	0x65202d2d
    22b8:	6c62616e 	.word	0x6c62616e
    22bc:	54522065 	.word	0x54522065
    22c0:	000d2e43 	.word	0x000d2e43
    22c4:	43505553 	.word	0x43505553
    22c8:	20202020 	.word	0x20202020
    22cc:	61202d2d 	.word	0x61202d2d
    22d0:	76697463 	.word	0x76697463
    22d4:	64657461 	.word	0x64657461
    22d8:	4f444c20 	.word	0x4f444c20
    22dc:	67657220 	.word	0x67657220
    22e0:	74616c75 	.word	0x74616c75
    22e4:	6620726f 	.word	0x6620726f
    22e8:	5620726f 	.word	0x5620726f
    22ec:	4f434444 	.word	0x4f434444
    22f0:	0d2e4552 	.word	0x0d2e4552
    22f4:	00000000 	.word	0x00000000

000022f8 <_global_impure_ptr>:
    22f8:	20000004                                ... 

000022fc <__sf_fake_stderr>:
	...

0000231c <__sf_fake_stdin>:
	...

0000233c <__sf_fake_stdout>:
	...

0000235c <_init>:
    235c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    235e:	bf00      	nop
    2360:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2362:	bc08      	pop	{r3}
    2364:	469e      	mov	lr, r3
    2366:	4770      	bx	lr

00002368 <__init_array_start>:
    2368:	000002cd 	.word	0x000002cd

0000236c <_fini>:
    236c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    236e:	bf00      	nop
    2370:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2372:	bc08      	pop	{r3}
    2374:	469e      	mov	lr, r3
    2376:	4770      	bx	lr

00002378 <__fini_array_start>:
    2378:	000002a5 	.word	0x000002a5
